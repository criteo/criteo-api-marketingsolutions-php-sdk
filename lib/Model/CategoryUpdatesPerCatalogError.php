<?php
/**
 * CategoryUpdatesPerCatalogError
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\v2020_10
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API Specification
 *
 * This is used to help Criteo clients use our APIs
 *
 * The version of the OpenAPI document: 2021-04
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\v2020_10\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\v2020_10\ObjectSerializer;

/**
 * CategoryUpdatesPerCatalogError Class Doc Comment
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\v2020_10
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CategoryUpdatesPerCatalogError implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CategoryUpdatesPerCatalogError';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'catalog_id' => 'int',
        'error_code' => 'string',
        'error_message' => 'string',
        'categories' => '\criteo\api\marketingsolutions\v2020_10\Model\CategoryUpdateError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'catalog_id' => 'int32',
        'error_code' => null,
        'error_message' => null,
        'categories' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'catalog_id' => 'catalogId',
        'error_code' => 'errorCode',
        'error_message' => 'errorMessage',
        'categories' => 'categories'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'catalog_id' => 'setCatalogId',
        'error_code' => 'setErrorCode',
        'error_message' => 'setErrorMessage',
        'categories' => 'setCategories'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'catalog_id' => 'getCatalogId',
        'error_code' => 'getErrorCode',
        'error_message' => 'getErrorMessage',
        'categories' => 'getCategories'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ERROR_CODE_OK = 'OK';
    const ERROR_CODE_ACCESS_DENIED = 'AccessDenied';
    const ERROR_CODE_ENABLED_CATEGORY_NUMBER_EXCEEDED = 'EnabledCategoryNumberExceeded';
    const ERROR_CODE_CATEGORIES_NOT_ENABLED = 'CategoriesNotEnabled';
    const ERROR_CODE_DUPLICATE_CATALOG_ENTRY = 'DuplicateCatalogEntry';
    const ERROR_CODE_INVALID_CATALOG_ID = 'InvalidCatalogId';
    const ERROR_CODE_INVALID_CATEGORY_HASHCODE = 'InvalidCategoryHashcode';
    const ERROR_CODE_INACTIVE_CATEGORY = 'InactiveCategory';
    const ERROR_CODE_DUPLICATE_CATEGORY_ENTRY = 'DuplicateCategoryEntry';
    const ERROR_CODE_BIDDING_CATEGORIES_ON_THIS_CAMPAIGN_NOT_ALLOWED = 'BiddingCategoriesOnThisCampaignNotAllowed';
    const ERROR_CODE_CAMPAIGN_NOT_IN_PORTFOLIO_OR_NOT_ACTIVE = 'CampaignNotInPortfolioOrNotActive';
    const ERROR_CODE_DUPLICATE_CAMPAIGN_ENTRY = 'DuplicateCampaignEntry';
    const ERROR_CODE_BIDDING_ON_THIS_CAMPAIGN_NOT_ALLOWED = 'BiddingOnThisCampaignNotAllowed';
    const ERROR_CODE_BID_NOT_IN_RANGE = 'BidNotInRange';
    const ERROR_CODE_FOUR_DECIMALS_NOT_ALLOWED = 'FourDecimalsNotAllowed';
    const ERROR_CODE_BIDDING_ON_TARGET_BUDGET_CAMPAIGN_NOT_ALLOWED = 'BiddingOnTargetBudgetCampaignNotAllowed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorCodeAllowableValues()
    {
        return [
            self::ERROR_CODE_OK,
            self::ERROR_CODE_ACCESS_DENIED,
            self::ERROR_CODE_ENABLED_CATEGORY_NUMBER_EXCEEDED,
            self::ERROR_CODE_CATEGORIES_NOT_ENABLED,
            self::ERROR_CODE_DUPLICATE_CATALOG_ENTRY,
            self::ERROR_CODE_INVALID_CATALOG_ID,
            self::ERROR_CODE_INVALID_CATEGORY_HASHCODE,
            self::ERROR_CODE_INACTIVE_CATEGORY,
            self::ERROR_CODE_DUPLICATE_CATEGORY_ENTRY,
            self::ERROR_CODE_BIDDING_CATEGORIES_ON_THIS_CAMPAIGN_NOT_ALLOWED,
            self::ERROR_CODE_CAMPAIGN_NOT_IN_PORTFOLIO_OR_NOT_ACTIVE,
            self::ERROR_CODE_DUPLICATE_CAMPAIGN_ENTRY,
            self::ERROR_CODE_BIDDING_ON_THIS_CAMPAIGN_NOT_ALLOWED,
            self::ERROR_CODE_BID_NOT_IN_RANGE,
            self::ERROR_CODE_FOUR_DECIMALS_NOT_ALLOWED,
            self::ERROR_CODE_BIDDING_ON_TARGET_BUDGET_CAMPAIGN_NOT_ALLOWED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['catalog_id'] = $data['catalog_id'] ?? null;
        $this->container['error_code'] = $data['error_code'] ?? null;
        $this->container['error_message'] = $data['error_message'] ?? null;
        $this->container['categories'] = $data['categories'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!is_null($this->container['error_code']) && !in_array($this->container['error_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'error_code', must be one of '%s'",
                $this->container['error_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets catalog_id
     *
     * @return int|null
     */
    public function getCatalogId()
    {
        return $this->container['catalog_id'];
    }

    /**
     * Sets catalog_id
     *
     * @param int|null $catalog_id catalog_id
     *
     * @return self
     */
    public function setCatalogId($catalog_id)
    {
        $this->container['catalog_id'] = $catalog_id;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string|null $error_code error_code
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!is_null($error_code) && !in_array($error_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'error_code', must be one of '%s'",
                    $error_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \criteo\api\marketingsolutions\v2020_10\Model\CategoryUpdateError[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \criteo\api\marketingsolutions\v2020_10\Model\CategoryUpdateError[]|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


