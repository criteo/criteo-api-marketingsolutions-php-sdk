<?php
/**
 * Product
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @description Defines a product to be inserted or updated.
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Product implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'offer_id' => 'string',
        'title' => 'string',
        'description' => 'string',
        'link' => 'string',
        'image_link' => 'string',
        'additional_image_links' => 'string[]',
        'content_language' => 'string',
        'target_country' => 'string',
        'channel' => 'string',
        'expiration_date' => 'string',
        'adult' => 'bool',
        'kind' => 'string',
        'brand' => 'string',
        'color' => 'string',
        'google_product_category' => 'string',
        'gtin' => 'string',
        'item_group_id' => 'string',
        'material' => 'string',
        'mpn' => 'string',
        'pattern' => 'string',
        'price' => '\criteo\api\marketingsolutions\preview\Model\Price',
        'sale_price' => '\criteo\api\marketingsolutions\preview\Model\Price',
        'sale_price_effective_date' => 'string',
        'shipping' => '\criteo\api\marketingsolutions\preview\Model\ProductShipping[]',
        'shipping_weight' => '\criteo\api\marketingsolutions\preview\Model\ProductShippingWeight',
        'sizes' => 'string[]',
        'taxes' => '\criteo\api\marketingsolutions\preview\Model\ProductTax[]',
        'custom_attributes' => '\criteo\api\marketingsolutions\preview\Model\CustomAttribute[]',
        'identifier_exists' => 'bool',
        'installment' => '\criteo\api\marketingsolutions\preview\Model\Installment',
        'loyalty_points' => '\criteo\api\marketingsolutions\preview\Model\LoyaltyPoints',
        'multipack' => 'int',
        'custom_label0' => 'string',
        'custom_label1' => 'string',
        'custom_label2' => 'string',
        'custom_label3' => 'string',
        'custom_label4' => 'string',
        'is_bundle' => 'bool',
        'mobile_link' => 'string',
        'availability_date' => 'string',
        'shipping_label' => 'string',
        'unit_pricing_measure' => '\criteo\api\marketingsolutions\preview\Model\ProductUnitPricingMeasure',
        'unit_pricing_base_measure' => '\criteo\api\marketingsolutions\preview\Model\ProductUnitPricingBaseMeasure',
        'shipping_length' => '\criteo\api\marketingsolutions\preview\Model\ProductShippingDimension',
        'shipping_width' => '\criteo\api\marketingsolutions\preview\Model\ProductShippingDimension',
        'shipping_height' => '\criteo\api\marketingsolutions\preview\Model\ProductShippingDimension',
        'display_ads_id' => 'string',
        'display_ads_similar_ids' => 'string[]',
        'display_ads_title' => 'string',
        'display_ads_link' => 'string',
        'display_ads_value' => 'float',
        'sell_on_google_quantity' => 'int',
        'promotion_ids' => 'string[]',
        'max_handling_time' => 'int',
        'min_handling_time' => 'int',
        'cost_of_goods_sold' => '\criteo\api\marketingsolutions\preview\Model\Price',
        'source' => 'string',
        'included_destinations' => 'string[]',
        'excluded_destinations' => 'string[]',
        'ads_grouping' => 'string',
        'ads_labels' => 'string[]',
        'ads_redirect' => 'string',
        'product_types' => 'string[]',
        'age_group' => 'string',
        'availability' => 'string',
        'condition' => 'string',
        'gender' => 'string',
        'size_system' => 'string',
        'size_type' => 'string',
        'energy_efficiency_class' => 'string',
        'min_energy_efficiency_class' => 'string',
        'max_energy_efficiency_class' => 'string',
        'tax_category' => 'string',
        'transit_time_label' => 'string',
        'seller_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'offer_id' => null,
        'title' => null,
        'description' => null,
        'link' => null,
        'image_link' => null,
        'additional_image_links' => null,
        'content_language' => null,
        'target_country' => null,
        'channel' => null,
        'expiration_date' => null,
        'adult' => null,
        'kind' => null,
        'brand' => null,
        'color' => null,
        'google_product_category' => null,
        'gtin' => null,
        'item_group_id' => null,
        'material' => null,
        'mpn' => null,
        'pattern' => null,
        'price' => null,
        'sale_price' => null,
        'sale_price_effective_date' => null,
        'shipping' => null,
        'shipping_weight' => null,
        'sizes' => null,
        'taxes' => null,
        'custom_attributes' => null,
        'identifier_exists' => null,
        'installment' => null,
        'loyalty_points' => null,
        'multipack' => 'int64',
        'custom_label0' => null,
        'custom_label1' => null,
        'custom_label2' => null,
        'custom_label3' => null,
        'custom_label4' => null,
        'is_bundle' => null,
        'mobile_link' => null,
        'availability_date' => null,
        'shipping_label' => null,
        'unit_pricing_measure' => null,
        'unit_pricing_base_measure' => null,
        'shipping_length' => null,
        'shipping_width' => null,
        'shipping_height' => null,
        'display_ads_id' => null,
        'display_ads_similar_ids' => null,
        'display_ads_title' => null,
        'display_ads_link' => null,
        'display_ads_value' => 'double',
        'sell_on_google_quantity' => 'int64',
        'promotion_ids' => null,
        'max_handling_time' => 'int64',
        'min_handling_time' => 'int64',
        'cost_of_goods_sold' => null,
        'source' => null,
        'included_destinations' => null,
        'excluded_destinations' => null,
        'ads_grouping' => null,
        'ads_labels' => null,
        'ads_redirect' => null,
        'product_types' => null,
        'age_group' => null,
        'availability' => null,
        'condition' => null,
        'gender' => null,
        'size_system' => null,
        'size_type' => null,
        'energy_efficiency_class' => null,
        'min_energy_efficiency_class' => null,
        'max_energy_efficiency_class' => null,
        'tax_category' => null,
        'transit_time_label' => null,
        'seller_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'offer_id' => false,
		'title' => false,
		'description' => false,
		'link' => false,
		'image_link' => false,
		'additional_image_links' => false,
		'content_language' => false,
		'target_country' => false,
		'channel' => false,
		'expiration_date' => false,
		'adult' => false,
		'kind' => false,
		'brand' => false,
		'color' => false,
		'google_product_category' => false,
		'gtin' => false,
		'item_group_id' => false,
		'material' => false,
		'mpn' => false,
		'pattern' => false,
		'price' => false,
		'sale_price' => false,
		'sale_price_effective_date' => false,
		'shipping' => false,
		'shipping_weight' => false,
		'sizes' => false,
		'taxes' => false,
		'custom_attributes' => false,
		'identifier_exists' => false,
		'installment' => false,
		'loyalty_points' => false,
		'multipack' => false,
		'custom_label0' => false,
		'custom_label1' => false,
		'custom_label2' => false,
		'custom_label3' => false,
		'custom_label4' => false,
		'is_bundle' => false,
		'mobile_link' => false,
		'availability_date' => false,
		'shipping_label' => false,
		'unit_pricing_measure' => false,
		'unit_pricing_base_measure' => false,
		'shipping_length' => false,
		'shipping_width' => false,
		'shipping_height' => false,
		'display_ads_id' => false,
		'display_ads_similar_ids' => false,
		'display_ads_title' => false,
		'display_ads_link' => false,
		'display_ads_value' => false,
		'sell_on_google_quantity' => false,
		'promotion_ids' => false,
		'max_handling_time' => false,
		'min_handling_time' => false,
		'cost_of_goods_sold' => false,
		'source' => false,
		'included_destinations' => false,
		'excluded_destinations' => false,
		'ads_grouping' => false,
		'ads_labels' => false,
		'ads_redirect' => false,
		'product_types' => false,
		'age_group' => false,
		'availability' => false,
		'condition' => false,
		'gender' => false,
		'size_system' => false,
		'size_type' => false,
		'energy_efficiency_class' => false,
		'min_energy_efficiency_class' => false,
		'max_energy_efficiency_class' => false,
		'tax_category' => false,
		'transit_time_label' => false,
		'seller_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'offer_id' => 'offerId',
        'title' => 'title',
        'description' => 'description',
        'link' => 'link',
        'image_link' => 'imageLink',
        'additional_image_links' => 'additionalImageLinks',
        'content_language' => 'contentLanguage',
        'target_country' => 'targetCountry',
        'channel' => 'channel',
        'expiration_date' => 'expirationDate',
        'adult' => 'adult',
        'kind' => 'kind',
        'brand' => 'brand',
        'color' => 'color',
        'google_product_category' => 'googleProductCategory',
        'gtin' => 'gtin',
        'item_group_id' => 'itemGroupId',
        'material' => 'material',
        'mpn' => 'mpn',
        'pattern' => 'pattern',
        'price' => 'price',
        'sale_price' => 'salePrice',
        'sale_price_effective_date' => 'salePriceEffectiveDate',
        'shipping' => 'shipping',
        'shipping_weight' => 'shippingWeight',
        'sizes' => 'sizes',
        'taxes' => 'taxes',
        'custom_attributes' => 'customAttributes',
        'identifier_exists' => 'identifierExists',
        'installment' => 'installment',
        'loyalty_points' => 'loyaltyPoints',
        'multipack' => 'multipack',
        'custom_label0' => 'customLabel0',
        'custom_label1' => 'customLabel1',
        'custom_label2' => 'customLabel2',
        'custom_label3' => 'customLabel3',
        'custom_label4' => 'customLabel4',
        'is_bundle' => 'isBundle',
        'mobile_link' => 'mobileLink',
        'availability_date' => 'availabilityDate',
        'shipping_label' => 'shippingLabel',
        'unit_pricing_measure' => 'unitPricingMeasure',
        'unit_pricing_base_measure' => 'unitPricingBaseMeasure',
        'shipping_length' => 'shippingLength',
        'shipping_width' => 'shippingWidth',
        'shipping_height' => 'shippingHeight',
        'display_ads_id' => 'displayAdsId',
        'display_ads_similar_ids' => 'displayAdsSimilarIds',
        'display_ads_title' => 'displayAdsTitle',
        'display_ads_link' => 'displayAdsLink',
        'display_ads_value' => 'displayAdsValue',
        'sell_on_google_quantity' => 'sellOnGoogleQuantity',
        'promotion_ids' => 'promotionIds',
        'max_handling_time' => 'maxHandlingTime',
        'min_handling_time' => 'minHandlingTime',
        'cost_of_goods_sold' => 'costOfGoodsSold',
        'source' => 'source',
        'included_destinations' => 'includedDestinations',
        'excluded_destinations' => 'excludedDestinations',
        'ads_grouping' => 'adsGrouping',
        'ads_labels' => 'adsLabels',
        'ads_redirect' => 'adsRedirect',
        'product_types' => 'productTypes',
        'age_group' => 'ageGroup',
        'availability' => 'availability',
        'condition' => 'condition',
        'gender' => 'gender',
        'size_system' => 'sizeSystem',
        'size_type' => 'sizeType',
        'energy_efficiency_class' => 'energyEfficiencyClass',
        'min_energy_efficiency_class' => 'minEnergyEfficiencyClass',
        'max_energy_efficiency_class' => 'maxEnergyEfficiencyClass',
        'tax_category' => 'taxCategory',
        'transit_time_label' => 'transitTimeLabel',
        'seller_id' => 'sellerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'offer_id' => 'setOfferId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'link' => 'setLink',
        'image_link' => 'setImageLink',
        'additional_image_links' => 'setAdditionalImageLinks',
        'content_language' => 'setContentLanguage',
        'target_country' => 'setTargetCountry',
        'channel' => 'setChannel',
        'expiration_date' => 'setExpirationDate',
        'adult' => 'setAdult',
        'kind' => 'setKind',
        'brand' => 'setBrand',
        'color' => 'setColor',
        'google_product_category' => 'setGoogleProductCategory',
        'gtin' => 'setGtin',
        'item_group_id' => 'setItemGroupId',
        'material' => 'setMaterial',
        'mpn' => 'setMpn',
        'pattern' => 'setPattern',
        'price' => 'setPrice',
        'sale_price' => 'setSalePrice',
        'sale_price_effective_date' => 'setSalePriceEffectiveDate',
        'shipping' => 'setShipping',
        'shipping_weight' => 'setShippingWeight',
        'sizes' => 'setSizes',
        'taxes' => 'setTaxes',
        'custom_attributes' => 'setCustomAttributes',
        'identifier_exists' => 'setIdentifierExists',
        'installment' => 'setInstallment',
        'loyalty_points' => 'setLoyaltyPoints',
        'multipack' => 'setMultipack',
        'custom_label0' => 'setCustomLabel0',
        'custom_label1' => 'setCustomLabel1',
        'custom_label2' => 'setCustomLabel2',
        'custom_label3' => 'setCustomLabel3',
        'custom_label4' => 'setCustomLabel4',
        'is_bundle' => 'setIsBundle',
        'mobile_link' => 'setMobileLink',
        'availability_date' => 'setAvailabilityDate',
        'shipping_label' => 'setShippingLabel',
        'unit_pricing_measure' => 'setUnitPricingMeasure',
        'unit_pricing_base_measure' => 'setUnitPricingBaseMeasure',
        'shipping_length' => 'setShippingLength',
        'shipping_width' => 'setShippingWidth',
        'shipping_height' => 'setShippingHeight',
        'display_ads_id' => 'setDisplayAdsId',
        'display_ads_similar_ids' => 'setDisplayAdsSimilarIds',
        'display_ads_title' => 'setDisplayAdsTitle',
        'display_ads_link' => 'setDisplayAdsLink',
        'display_ads_value' => 'setDisplayAdsValue',
        'sell_on_google_quantity' => 'setSellOnGoogleQuantity',
        'promotion_ids' => 'setPromotionIds',
        'max_handling_time' => 'setMaxHandlingTime',
        'min_handling_time' => 'setMinHandlingTime',
        'cost_of_goods_sold' => 'setCostOfGoodsSold',
        'source' => 'setSource',
        'included_destinations' => 'setIncludedDestinations',
        'excluded_destinations' => 'setExcludedDestinations',
        'ads_grouping' => 'setAdsGrouping',
        'ads_labels' => 'setAdsLabels',
        'ads_redirect' => 'setAdsRedirect',
        'product_types' => 'setProductTypes',
        'age_group' => 'setAgeGroup',
        'availability' => 'setAvailability',
        'condition' => 'setCondition',
        'gender' => 'setGender',
        'size_system' => 'setSizeSystem',
        'size_type' => 'setSizeType',
        'energy_efficiency_class' => 'setEnergyEfficiencyClass',
        'min_energy_efficiency_class' => 'setMinEnergyEfficiencyClass',
        'max_energy_efficiency_class' => 'setMaxEnergyEfficiencyClass',
        'tax_category' => 'setTaxCategory',
        'transit_time_label' => 'setTransitTimeLabel',
        'seller_id' => 'setSellerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'offer_id' => 'getOfferId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'link' => 'getLink',
        'image_link' => 'getImageLink',
        'additional_image_links' => 'getAdditionalImageLinks',
        'content_language' => 'getContentLanguage',
        'target_country' => 'getTargetCountry',
        'channel' => 'getChannel',
        'expiration_date' => 'getExpirationDate',
        'adult' => 'getAdult',
        'kind' => 'getKind',
        'brand' => 'getBrand',
        'color' => 'getColor',
        'google_product_category' => 'getGoogleProductCategory',
        'gtin' => 'getGtin',
        'item_group_id' => 'getItemGroupId',
        'material' => 'getMaterial',
        'mpn' => 'getMpn',
        'pattern' => 'getPattern',
        'price' => 'getPrice',
        'sale_price' => 'getSalePrice',
        'sale_price_effective_date' => 'getSalePriceEffectiveDate',
        'shipping' => 'getShipping',
        'shipping_weight' => 'getShippingWeight',
        'sizes' => 'getSizes',
        'taxes' => 'getTaxes',
        'custom_attributes' => 'getCustomAttributes',
        'identifier_exists' => 'getIdentifierExists',
        'installment' => 'getInstallment',
        'loyalty_points' => 'getLoyaltyPoints',
        'multipack' => 'getMultipack',
        'custom_label0' => 'getCustomLabel0',
        'custom_label1' => 'getCustomLabel1',
        'custom_label2' => 'getCustomLabel2',
        'custom_label3' => 'getCustomLabel3',
        'custom_label4' => 'getCustomLabel4',
        'is_bundle' => 'getIsBundle',
        'mobile_link' => 'getMobileLink',
        'availability_date' => 'getAvailabilityDate',
        'shipping_label' => 'getShippingLabel',
        'unit_pricing_measure' => 'getUnitPricingMeasure',
        'unit_pricing_base_measure' => 'getUnitPricingBaseMeasure',
        'shipping_length' => 'getShippingLength',
        'shipping_width' => 'getShippingWidth',
        'shipping_height' => 'getShippingHeight',
        'display_ads_id' => 'getDisplayAdsId',
        'display_ads_similar_ids' => 'getDisplayAdsSimilarIds',
        'display_ads_title' => 'getDisplayAdsTitle',
        'display_ads_link' => 'getDisplayAdsLink',
        'display_ads_value' => 'getDisplayAdsValue',
        'sell_on_google_quantity' => 'getSellOnGoogleQuantity',
        'promotion_ids' => 'getPromotionIds',
        'max_handling_time' => 'getMaxHandlingTime',
        'min_handling_time' => 'getMinHandlingTime',
        'cost_of_goods_sold' => 'getCostOfGoodsSold',
        'source' => 'getSource',
        'included_destinations' => 'getIncludedDestinations',
        'excluded_destinations' => 'getExcludedDestinations',
        'ads_grouping' => 'getAdsGrouping',
        'ads_labels' => 'getAdsLabels',
        'ads_redirect' => 'getAdsRedirect',
        'product_types' => 'getProductTypes',
        'age_group' => 'getAgeGroup',
        'availability' => 'getAvailability',
        'condition' => 'getCondition',
        'gender' => 'getGender',
        'size_system' => 'getSizeSystem',
        'size_type' => 'getSizeType',
        'energy_efficiency_class' => 'getEnergyEfficiencyClass',
        'min_energy_efficiency_class' => 'getMinEnergyEfficiencyClass',
        'max_energy_efficiency_class' => 'getMaxEnergyEfficiencyClass',
        'tax_category' => 'getTaxCategory',
        'transit_time_label' => 'getTransitTimeLabel',
        'seller_id' => 'getSellerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHANNEL_ONLINE = 'online';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_ONLINE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('offer_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('image_link', $data ?? [], null);
        $this->setIfExists('additional_image_links', $data ?? [], null);
        $this->setIfExists('content_language', $data ?? [], null);
        $this->setIfExists('target_country', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('adult', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('google_product_category', $data ?? [], null);
        $this->setIfExists('gtin', $data ?? [], null);
        $this->setIfExists('item_group_id', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('mpn', $data ?? [], null);
        $this->setIfExists('pattern', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('sale_price', $data ?? [], null);
        $this->setIfExists('sale_price_effective_date', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('shipping_weight', $data ?? [], null);
        $this->setIfExists('sizes', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('identifier_exists', $data ?? [], null);
        $this->setIfExists('installment', $data ?? [], null);
        $this->setIfExists('loyalty_points', $data ?? [], null);
        $this->setIfExists('multipack', $data ?? [], null);
        $this->setIfExists('custom_label0', $data ?? [], null);
        $this->setIfExists('custom_label1', $data ?? [], null);
        $this->setIfExists('custom_label2', $data ?? [], null);
        $this->setIfExists('custom_label3', $data ?? [], null);
        $this->setIfExists('custom_label4', $data ?? [], null);
        $this->setIfExists('is_bundle', $data ?? [], null);
        $this->setIfExists('mobile_link', $data ?? [], null);
        $this->setIfExists('availability_date', $data ?? [], null);
        $this->setIfExists('shipping_label', $data ?? [], null);
        $this->setIfExists('unit_pricing_measure', $data ?? [], null);
        $this->setIfExists('unit_pricing_base_measure', $data ?? [], null);
        $this->setIfExists('shipping_length', $data ?? [], null);
        $this->setIfExists('shipping_width', $data ?? [], null);
        $this->setIfExists('shipping_height', $data ?? [], null);
        $this->setIfExists('display_ads_id', $data ?? [], null);
        $this->setIfExists('display_ads_similar_ids', $data ?? [], null);
        $this->setIfExists('display_ads_title', $data ?? [], null);
        $this->setIfExists('display_ads_link', $data ?? [], null);
        $this->setIfExists('display_ads_value', $data ?? [], null);
        $this->setIfExists('sell_on_google_quantity', $data ?? [], null);
        $this->setIfExists('promotion_ids', $data ?? [], null);
        $this->setIfExists('max_handling_time', $data ?? [], null);
        $this->setIfExists('min_handling_time', $data ?? [], null);
        $this->setIfExists('cost_of_goods_sold', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('included_destinations', $data ?? [], null);
        $this->setIfExists('excluded_destinations', $data ?? [], null);
        $this->setIfExists('ads_grouping', $data ?? [], null);
        $this->setIfExists('ads_labels', $data ?? [], null);
        $this->setIfExists('ads_redirect', $data ?? [], null);
        $this->setIfExists('product_types', $data ?? [], null);
        $this->setIfExists('age_group', $data ?? [], null);
        $this->setIfExists('availability', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('size_system', $data ?? [], null);
        $this->setIfExists('size_type', $data ?? [], null);
        $this->setIfExists('energy_efficiency_class', $data ?? [], null);
        $this->setIfExists('min_energy_efficiency_class', $data ?? [], null);
        $this->setIfExists('max_energy_efficiency_class', $data ?? [], null);
        $this->setIfExists('tax_category', $data ?? [], null);
        $this->setIfExists('transit_time_label', $data ?? [], null);
        $this->setIfExists('seller_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['link'] === null) {
            $invalidProperties[] = "'link' can't be null";
        }
        if ($this->container['image_link'] === null) {
            $invalidProperties[] = "'image_link' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel', must be one of '%s'",
                $this->container['channel'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique identifier for the item. Aka Product ID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return string|null
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string|null $offer_id Not used by Criteo.
     *
     * @return self
     */
    public function setOfferId($offer_id)
    {
        if (is_null($offer_id)) {
            throw new \InvalidArgumentException('non-nullable offer_id cannot be null');
        }
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the item. (500 UTF8 characters max).
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the item. RECOMMENDED. (5000 UTF8 characters max).
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string $link URL directly linking to your item's page on your website. (1000 UTF8 characters max).
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets image_link
     *
     * @return string
     */
    public function getImageLink()
    {
        return $this->container['image_link'];
    }

    /**
     * Sets image_link
     *
     * @param string $image_link URL of an image of the item. Supported formats: PNG, JPEG, GIF. (2000 UTF8 characters max).
     *
     * @return self
     */
    public function setImageLink($image_link)
    {
        if (is_null($image_link)) {
            throw new \InvalidArgumentException('non-nullable image_link cannot be null');
        }
        $this->container['image_link'] = $image_link;

        return $this;
    }

    /**
     * Gets additional_image_links
     *
     * @return string[]|null
     */
    public function getAdditionalImageLinks()
    {
        return $this->container['additional_image_links'];
    }

    /**
     * Sets additional_image_links
     *
     * @param string[]|null $additional_image_links Additional URLs of images of the item.
     *
     * @return self
     */
    public function setAdditionalImageLinks($additional_image_links)
    {
        if (is_null($additional_image_links)) {
            throw new \InvalidArgumentException('non-nullable additional_image_links cannot be null');
        }
        $this->container['additional_image_links'] = $additional_image_links;

        return $this;
    }

    /**
     * Gets content_language
     *
     * @return string|null
     */
    public function getContentLanguage()
    {
        return $this->container['content_language'];
    }

    /**
     * Sets content_language
     *
     * @param string|null $content_language The two-letter ISO 639-1 language code for the item.
     *
     * @return self
     */
    public function setContentLanguage($content_language)
    {
        if (is_null($content_language)) {
            throw new \InvalidArgumentException('non-nullable content_language cannot be null');
        }
        $this->container['content_language'] = $content_language;

        return $this;
    }

    /**
     * Gets target_country
     *
     * @return string|null
     */
    public function getTargetCountry()
    {
        return $this->container['target_country'];
    }

    /**
     * Sets target_country
     *
     * @param string|null $target_country The CLDR territory code for the item.
     *
     * @return self
     */
    public function setTargetCountry($target_country)
    {
        if (is_null($target_country)) {
            throw new \InvalidArgumentException('non-nullable target_country cannot be null');
        }
        $this->container['target_country'] = $target_country;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel The item's channel (online only).
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel', must be one of '%s'",
                    $channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date Date on which the item should expire, as specified upon insertion, in ISO 8601 format.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets adult
     *
     * @return bool|null
     */
    public function getAdult()
    {
        return $this->container['adult'];
    }

    /**
     * Sets adult
     *
     * @param bool|null $adult Set to true if the item is targeted towards adults. RECOMMENDED.
     *
     * @return self
     */
    public function setAdult($adult)
    {
        if (is_null($adult)) {
            throw new \InvalidArgumentException('non-nullable adult cannot be null');
        }
        $this->container['adult'] = $adult;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string|null $kind Identifies what kind of resource this is.
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Brand of the item. RECOMMENDED.
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color Color of the item.
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets google_product_category
     *
     * @return string|null
     */
    public function getGoogleProductCategory()
    {
        return $this->container['google_product_category'];
    }

    /**
     * Sets google_product_category
     *
     * @param string|null $google_product_category Google's category of the item (see Google product taxonomy). RECOMMENDED.
     *
     * @return self
     */
    public function setGoogleProductCategory($google_product_category)
    {
        if (is_null($google_product_category)) {
            throw new \InvalidArgumentException('non-nullable google_product_category cannot be null');
        }
        $this->container['google_product_category'] = $google_product_category;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin Global Trade Item Number (GTIN) of the item. RECOMMENDED.
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        if (is_null($gtin)) {
            throw new \InvalidArgumentException('non-nullable gtin cannot be null');
        }
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets item_group_id
     *
     * @return string|null
     */
    public function getItemGroupId()
    {
        return $this->container['item_group_id'];
    }

    /**
     * Sets item_group_id
     *
     * @param string|null $item_group_id Shared identifier for all variants of the same product. RECOMMENDED.
     *
     * @return self
     */
    public function setItemGroupId($item_group_id)
    {
        if (is_null($item_group_id)) {
            throw new \InvalidArgumentException('non-nullable item_group_id cannot be null');
        }
        $this->container['item_group_id'] = $item_group_id;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material The material of which the item is made.
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            throw new \InvalidArgumentException('non-nullable material cannot be null');
        }
        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string|null
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string|null $mpn Manufacturer Part Number (MPN) of the item. RECOMMENDED.
     *
     * @return self
     */
    public function setMpn($mpn)
    {
        if (is_null($mpn)) {
            throw new \InvalidArgumentException('non-nullable mpn cannot be null');
        }
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string|null
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string|null $pattern The item's pattern (e.g. polka dots).
     *
     * @return self
     */
    public function setPattern($pattern)
    {
        if (is_null($pattern)) {
            throw new \InvalidArgumentException('non-nullable pattern cannot be null');
        }
        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \criteo\api\marketingsolutions\preview\Model\Price|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \criteo\api\marketingsolutions\preview\Model\Price|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets sale_price
     *
     * @return \criteo\api\marketingsolutions\preview\Model\Price|null
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param \criteo\api\marketingsolutions\preview\Model\Price|null $sale_price sale_price
     *
     * @return self
     */
    public function setSalePrice($sale_price)
    {
        if (is_null($sale_price)) {
            throw new \InvalidArgumentException('non-nullable sale_price cannot be null');
        }
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets sale_price_effective_date
     *
     * @return string|null
     */
    public function getSalePriceEffectiveDate()
    {
        return $this->container['sale_price_effective_date'];
    }

    /**
     * Sets sale_price_effective_date
     *
     * @param string|null $sale_price_effective_date Date range during which the item is on sale.
     *
     * @return self
     */
    public function setSalePriceEffectiveDate($sale_price_effective_date)
    {
        if (is_null($sale_price_effective_date)) {
            throw new \InvalidArgumentException('non-nullable sale_price_effective_date cannot be null');
        }
        $this->container['sale_price_effective_date'] = $sale_price_effective_date;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ProductShipping[]|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ProductShipping[]|null $shipping Shipping rules.
     *
     * @return self
     */
    public function setShipping($shipping)
    {
        if (is_null($shipping)) {
            throw new \InvalidArgumentException('non-nullable shipping cannot be null');
        }
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets shipping_weight
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ProductShippingWeight|null
     */
    public function getShippingWeight()
    {
        return $this->container['shipping_weight'];
    }

    /**
     * Sets shipping_weight
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ProductShippingWeight|null $shipping_weight shipping_weight
     *
     * @return self
     */
    public function setShippingWeight($shipping_weight)
    {
        if (is_null($shipping_weight)) {
            throw new \InvalidArgumentException('non-nullable shipping_weight cannot be null');
        }
        $this->container['shipping_weight'] = $shipping_weight;

        return $this;
    }

    /**
     * Gets sizes
     *
     * @return string[]|null
     */
    public function getSizes()
    {
        return $this->container['sizes'];
    }

    /**
     * Sets sizes
     *
     * @param string[]|null $sizes Size of the item. RECOMMENDED. Only one value is allowed. For variants with different sizes, insert a separate product for each size with the same itemGroupId value.
     *
     * @return self
     */
    public function setSizes($sizes)
    {
        if (is_null($sizes)) {
            throw new \InvalidArgumentException('non-nullable sizes cannot be null');
        }
        $this->container['sizes'] = $sizes;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ProductTax[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ProductTax[]|null $taxes Tax information.
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \criteo\api\marketingsolutions\preview\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \criteo\api\marketingsolutions\preview\Model\CustomAttribute[]|null $custom_attributes A list of custom (merchant-provided) attributes. This is useful for submitting attributes not explicitly exposed by the API. Declaring attributes explicitly exposed by the API using is forbidden
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets identifier_exists
     *
     * @return bool|null
     */
    public function getIdentifierExists()
    {
        return $this->container['identifier_exists'];
    }

    /**
     * Sets identifier_exists
     *
     * @param bool|null $identifier_exists False when the item does not have unique product identifiers appropriate to its category, such as GTIN, MPN, and brand. Required according to the Unique Product Identifier Rules for all target countries except for Canada.
     *
     * @return self
     */
    public function setIdentifierExists($identifier_exists)
    {
        if (is_null($identifier_exists)) {
            throw new \InvalidArgumentException('non-nullable identifier_exists cannot be null');
        }
        $this->container['identifier_exists'] = $identifier_exists;

        return $this;
    }

    /**
     * Gets installment
     *
     * @return \criteo\api\marketingsolutions\preview\Model\Installment|null
     */
    public function getInstallment()
    {
        return $this->container['installment'];
    }

    /**
     * Sets installment
     *
     * @param \criteo\api\marketingsolutions\preview\Model\Installment|null $installment installment
     *
     * @return self
     */
    public function setInstallment($installment)
    {
        if (is_null($installment)) {
            throw new \InvalidArgumentException('non-nullable installment cannot be null');
        }
        $this->container['installment'] = $installment;

        return $this;
    }

    /**
     * Gets loyalty_points
     *
     * @return \criteo\api\marketingsolutions\preview\Model\LoyaltyPoints|null
     */
    public function getLoyaltyPoints()
    {
        return $this->container['loyalty_points'];
    }

    /**
     * Sets loyalty_points
     *
     * @param \criteo\api\marketingsolutions\preview\Model\LoyaltyPoints|null $loyalty_points loyalty_points
     *
     * @return self
     */
    public function setLoyaltyPoints($loyalty_points)
    {
        if (is_null($loyalty_points)) {
            throw new \InvalidArgumentException('non-nullable loyalty_points cannot be null');
        }
        $this->container['loyalty_points'] = $loyalty_points;

        return $this;
    }

    /**
     * Gets multipack
     *
     * @return int|null
     */
    public function getMultipack()
    {
        return $this->container['multipack'];
    }

    /**
     * Sets multipack
     *
     * @param int|null $multipack The number of identical products in a merchant-defined multipack. To avoid any overflow issue, pass it as a string.
     *
     * @return self
     */
    public function setMultipack($multipack)
    {
        if (is_null($multipack)) {
            throw new \InvalidArgumentException('non-nullable multipack cannot be null');
        }
        $this->container['multipack'] = $multipack;

        return $this;
    }

    /**
     * Gets custom_label0
     *
     * @return string|null
     */
    public function getCustomLabel0()
    {
        return $this->container['custom_label0'];
    }

    /**
     * Sets custom_label0
     *
     * @param string|null $custom_label0 Custom label 0 for custom grouping of items in a Shopping campaign.
     *
     * @return self
     */
    public function setCustomLabel0($custom_label0)
    {
        if (is_null($custom_label0)) {
            throw new \InvalidArgumentException('non-nullable custom_label0 cannot be null');
        }
        $this->container['custom_label0'] = $custom_label0;

        return $this;
    }

    /**
     * Gets custom_label1
     *
     * @return string|null
     */
    public function getCustomLabel1()
    {
        return $this->container['custom_label1'];
    }

    /**
     * Sets custom_label1
     *
     * @param string|null $custom_label1 Custom label 1 for custom grouping of items in a Shopping campaign.
     *
     * @return self
     */
    public function setCustomLabel1($custom_label1)
    {
        if (is_null($custom_label1)) {
            throw new \InvalidArgumentException('non-nullable custom_label1 cannot be null');
        }
        $this->container['custom_label1'] = $custom_label1;

        return $this;
    }

    /**
     * Gets custom_label2
     *
     * @return string|null
     */
    public function getCustomLabel2()
    {
        return $this->container['custom_label2'];
    }

    /**
     * Sets custom_label2
     *
     * @param string|null $custom_label2 Custom label 2 for custom grouping of items in a Shopping campaign.
     *
     * @return self
     */
    public function setCustomLabel2($custom_label2)
    {
        if (is_null($custom_label2)) {
            throw new \InvalidArgumentException('non-nullable custom_label2 cannot be null');
        }
        $this->container['custom_label2'] = $custom_label2;

        return $this;
    }

    /**
     * Gets custom_label3
     *
     * @return string|null
     */
    public function getCustomLabel3()
    {
        return $this->container['custom_label3'];
    }

    /**
     * Sets custom_label3
     *
     * @param string|null $custom_label3 Custom label 3 for custom grouping of items in a Shopping campaign.
     *
     * @return self
     */
    public function setCustomLabel3($custom_label3)
    {
        if (is_null($custom_label3)) {
            throw new \InvalidArgumentException('non-nullable custom_label3 cannot be null');
        }
        $this->container['custom_label3'] = $custom_label3;

        return $this;
    }

    /**
     * Gets custom_label4
     *
     * @return string|null
     */
    public function getCustomLabel4()
    {
        return $this->container['custom_label4'];
    }

    /**
     * Sets custom_label4
     *
     * @param string|null $custom_label4 Custom label 4 for custom grouping of items in a Shopping campaign.
     *
     * @return self
     */
    public function setCustomLabel4($custom_label4)
    {
        if (is_null($custom_label4)) {
            throw new \InvalidArgumentException('non-nullable custom_label4 cannot be null');
        }
        $this->container['custom_label4'] = $custom_label4;

        return $this;
    }

    /**
     * Gets is_bundle
     *
     * @return bool|null
     */
    public function getIsBundle()
    {
        return $this->container['is_bundle'];
    }

    /**
     * Sets is_bundle
     *
     * @param bool|null $is_bundle Whether the item is a merchant-defined bundle. A bundle is a custom grouping of different products sold by a merchant for a single price.
     *
     * @return self
     */
    public function setIsBundle($is_bundle)
    {
        if (is_null($is_bundle)) {
            throw new \InvalidArgumentException('non-nullable is_bundle cannot be null');
        }
        $this->container['is_bundle'] = $is_bundle;

        return $this;
    }

    /**
     * Gets mobile_link
     *
     * @return string|null
     */
    public function getMobileLink()
    {
        return $this->container['mobile_link'];
    }

    /**
     * Sets mobile_link
     *
     * @param string|null $mobile_link accounts.link to a mobile-optimized version of the landing page.
     *
     * @return self
     */
    public function setMobileLink($mobile_link)
    {
        if (is_null($mobile_link)) {
            throw new \InvalidArgumentException('non-nullable mobile_link cannot be null');
        }
        $this->container['mobile_link'] = $mobile_link;

        return $this;
    }

    /**
     * Gets availability_date
     *
     * @return string|null
     */
    public function getAvailabilityDate()
    {
        return $this->container['availability_date'];
    }

    /**
     * Sets availability_date
     *
     * @param string|null $availability_date The day a pre-ordered product becomes available for delivery, in ISO 8601 format.
     *
     * @return self
     */
    public function setAvailabilityDate($availability_date)
    {
        if (is_null($availability_date)) {
            throw new \InvalidArgumentException('non-nullable availability_date cannot be null');
        }
        $this->container['availability_date'] = $availability_date;

        return $this;
    }

    /**
     * Gets shipping_label
     *
     * @return string|null
     */
    public function getShippingLabel()
    {
        return $this->container['shipping_label'];
    }

    /**
     * Sets shipping_label
     *
     * @param string|null $shipping_label The shipping label of the product, used to group product in account-level shipping rules.
     *
     * @return self
     */
    public function setShippingLabel($shipping_label)
    {
        if (is_null($shipping_label)) {
            throw new \InvalidArgumentException('non-nullable shipping_label cannot be null');
        }
        $this->container['shipping_label'] = $shipping_label;

        return $this;
    }

    /**
     * Gets unit_pricing_measure
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ProductUnitPricingMeasure|null
     */
    public function getUnitPricingMeasure()
    {
        return $this->container['unit_pricing_measure'];
    }

    /**
     * Sets unit_pricing_measure
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ProductUnitPricingMeasure|null $unit_pricing_measure unit_pricing_measure
     *
     * @return self
     */
    public function setUnitPricingMeasure($unit_pricing_measure)
    {
        if (is_null($unit_pricing_measure)) {
            throw new \InvalidArgumentException('non-nullable unit_pricing_measure cannot be null');
        }
        $this->container['unit_pricing_measure'] = $unit_pricing_measure;

        return $this;
    }

    /**
     * Gets unit_pricing_base_measure
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ProductUnitPricingBaseMeasure|null
     */
    public function getUnitPricingBaseMeasure()
    {
        return $this->container['unit_pricing_base_measure'];
    }

    /**
     * Sets unit_pricing_base_measure
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ProductUnitPricingBaseMeasure|null $unit_pricing_base_measure unit_pricing_base_measure
     *
     * @return self
     */
    public function setUnitPricingBaseMeasure($unit_pricing_base_measure)
    {
        if (is_null($unit_pricing_base_measure)) {
            throw new \InvalidArgumentException('non-nullable unit_pricing_base_measure cannot be null');
        }
        $this->container['unit_pricing_base_measure'] = $unit_pricing_base_measure;

        return $this;
    }

    /**
     * Gets shipping_length
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ProductShippingDimension|null
     */
    public function getShippingLength()
    {
        return $this->container['shipping_length'];
    }

    /**
     * Sets shipping_length
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ProductShippingDimension|null $shipping_length shipping_length
     *
     * @return self
     */
    public function setShippingLength($shipping_length)
    {
        if (is_null($shipping_length)) {
            throw new \InvalidArgumentException('non-nullable shipping_length cannot be null');
        }
        $this->container['shipping_length'] = $shipping_length;

        return $this;
    }

    /**
     * Gets shipping_width
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ProductShippingDimension|null
     */
    public function getShippingWidth()
    {
        return $this->container['shipping_width'];
    }

    /**
     * Sets shipping_width
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ProductShippingDimension|null $shipping_width shipping_width
     *
     * @return self
     */
    public function setShippingWidth($shipping_width)
    {
        if (is_null($shipping_width)) {
            throw new \InvalidArgumentException('non-nullable shipping_width cannot be null');
        }
        $this->container['shipping_width'] = $shipping_width;

        return $this;
    }

    /**
     * Gets shipping_height
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ProductShippingDimension|null
     */
    public function getShippingHeight()
    {
        return $this->container['shipping_height'];
    }

    /**
     * Sets shipping_height
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ProductShippingDimension|null $shipping_height shipping_height
     *
     * @return self
     */
    public function setShippingHeight($shipping_height)
    {
        if (is_null($shipping_height)) {
            throw new \InvalidArgumentException('non-nullable shipping_height cannot be null');
        }
        $this->container['shipping_height'] = $shipping_height;

        return $this;
    }

    /**
     * Gets display_ads_id
     *
     * @return string|null
     */
    public function getDisplayAdsId()
    {
        return $this->container['display_ads_id'];
    }

    /**
     * Sets display_ads_id
     *
     * @param string|null $display_ads_id An identifier for an item for dynamic remarketing campaigns.
     *
     * @return self
     */
    public function setDisplayAdsId($display_ads_id)
    {
        if (is_null($display_ads_id)) {
            throw new \InvalidArgumentException('non-nullable display_ads_id cannot be null');
        }
        $this->container['display_ads_id'] = $display_ads_id;

        return $this;
    }

    /**
     * Gets display_ads_similar_ids
     *
     * @return string[]|null
     */
    public function getDisplayAdsSimilarIds()
    {
        return $this->container['display_ads_similar_ids'];
    }

    /**
     * Sets display_ads_similar_ids
     *
     * @param string[]|null $display_ads_similar_ids Advertiser-specified recommendations.
     *
     * @return self
     */
    public function setDisplayAdsSimilarIds($display_ads_similar_ids)
    {
        if (is_null($display_ads_similar_ids)) {
            throw new \InvalidArgumentException('non-nullable display_ads_similar_ids cannot be null');
        }
        $this->container['display_ads_similar_ids'] = $display_ads_similar_ids;

        return $this;
    }

    /**
     * Gets display_ads_title
     *
     * @return string|null
     */
    public function getDisplayAdsTitle()
    {
        return $this->container['display_ads_title'];
    }

    /**
     * Sets display_ads_title
     *
     * @param string|null $display_ads_title Title of an item for dynamic remarketing campaigns.
     *
     * @return self
     */
    public function setDisplayAdsTitle($display_ads_title)
    {
        if (is_null($display_ads_title)) {
            throw new \InvalidArgumentException('non-nullable display_ads_title cannot be null');
        }
        $this->container['display_ads_title'] = $display_ads_title;

        return $this;
    }

    /**
     * Gets display_ads_link
     *
     * @return string|null
     */
    public function getDisplayAdsLink()
    {
        return $this->container['display_ads_link'];
    }

    /**
     * Sets display_ads_link
     *
     * @param string|null $display_ads_link URL directly to your item's landing page for dynamic remarketing campaigns.
     *
     * @return self
     */
    public function setDisplayAdsLink($display_ads_link)
    {
        if (is_null($display_ads_link)) {
            throw new \InvalidArgumentException('non-nullable display_ads_link cannot be null');
        }
        $this->container['display_ads_link'] = $display_ads_link;

        return $this;
    }

    /**
     * Gets display_ads_value
     *
     * @return float|null
     */
    public function getDisplayAdsValue()
    {
        return $this->container['display_ads_value'];
    }

    /**
     * Sets display_ads_value
     *
     * @param float|null $display_ads_value Offer margin for dynamic remarketing campaigns.
     *
     * @return self
     */
    public function setDisplayAdsValue($display_ads_value)
    {
        if (is_null($display_ads_value)) {
            throw new \InvalidArgumentException('non-nullable display_ads_value cannot be null');
        }
        $this->container['display_ads_value'] = $display_ads_value;

        return $this;
    }

    /**
     * Gets sell_on_google_quantity
     *
     * @return int|null
     */
    public function getSellOnGoogleQuantity()
    {
        return $this->container['sell_on_google_quantity'];
    }

    /**
     * Sets sell_on_google_quantity
     *
     * @param int|null $sell_on_google_quantity The quantity of the product that is available for selling on Google. Supported only for online products.
     *
     * @return self
     */
    public function setSellOnGoogleQuantity($sell_on_google_quantity)
    {
        if (is_null($sell_on_google_quantity)) {
            throw new \InvalidArgumentException('non-nullable sell_on_google_quantity cannot be null');
        }
        $this->container['sell_on_google_quantity'] = $sell_on_google_quantity;

        return $this;
    }

    /**
     * Gets promotion_ids
     *
     * @return string[]|null
     */
    public function getPromotionIds()
    {
        return $this->container['promotion_ids'];
    }

    /**
     * Sets promotion_ids
     *
     * @param string[]|null $promotion_ids The unique ID of a promotion.
     *
     * @return self
     */
    public function setPromotionIds($promotion_ids)
    {
        if (is_null($promotion_ids)) {
            throw new \InvalidArgumentException('non-nullable promotion_ids cannot be null');
        }
        $this->container['promotion_ids'] = $promotion_ids;

        return $this;
    }

    /**
     * Gets max_handling_time
     *
     * @return int|null
     */
    public function getMaxHandlingTime()
    {
        return $this->container['max_handling_time'];
    }

    /**
     * Sets max_handling_time
     *
     * @param int|null $max_handling_time Maximal product handling time (in business days).
     *
     * @return self
     */
    public function setMaxHandlingTime($max_handling_time)
    {
        if (is_null($max_handling_time)) {
            throw new \InvalidArgumentException('non-nullable max_handling_time cannot be null');
        }
        $this->container['max_handling_time'] = $max_handling_time;

        return $this;
    }

    /**
     * Gets min_handling_time
     *
     * @return int|null
     */
    public function getMinHandlingTime()
    {
        return $this->container['min_handling_time'];
    }

    /**
     * Sets min_handling_time
     *
     * @param int|null $min_handling_time Minimal product handling time (in business days).
     *
     * @return self
     */
    public function setMinHandlingTime($min_handling_time)
    {
        if (is_null($min_handling_time)) {
            throw new \InvalidArgumentException('non-nullable min_handling_time cannot be null');
        }
        $this->container['min_handling_time'] = $min_handling_time;

        return $this;
    }

    /**
     * Gets cost_of_goods_sold
     *
     * @return \criteo\api\marketingsolutions\preview\Model\Price|null
     */
    public function getCostOfGoodsSold()
    {
        return $this->container['cost_of_goods_sold'];
    }

    /**
     * Sets cost_of_goods_sold
     *
     * @param \criteo\api\marketingsolutions\preview\Model\Price|null $cost_of_goods_sold cost_of_goods_sold
     *
     * @return self
     */
    public function setCostOfGoodsSold($cost_of_goods_sold)
    {
        if (is_null($cost_of_goods_sold)) {
            throw new \InvalidArgumentException('non-nullable cost_of_goods_sold cannot be null');
        }
        $this->container['cost_of_goods_sold'] = $cost_of_goods_sold;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source The source of the offer, i.e., how the offer was created.
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets included_destinations
     *
     * @return string[]|null
     */
    public function getIncludedDestinations()
    {
        return $this->container['included_destinations'];
    }

    /**
     * Sets included_destinations
     *
     * @param string[]|null $included_destinations The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in excludedDestinations.
     *
     * @return self
     */
    public function setIncludedDestinations($included_destinations)
    {
        if (is_null($included_destinations)) {
            throw new \InvalidArgumentException('non-nullable included_destinations cannot be null');
        }
        $this->container['included_destinations'] = $included_destinations;

        return $this;
    }

    /**
     * Gets excluded_destinations
     *
     * @return string[]|null
     */
    public function getExcludedDestinations()
    {
        return $this->container['excluded_destinations'];
    }

    /**
     * Sets excluded_destinations
     *
     * @param string[]|null $excluded_destinations The list of destinations to exclude for this target (corresponds to unchecked check boxes in Merchant Center).
     *
     * @return self
     */
    public function setExcludedDestinations($excluded_destinations)
    {
        if (is_null($excluded_destinations)) {
            throw new \InvalidArgumentException('non-nullable excluded_destinations cannot be null');
        }
        $this->container['excluded_destinations'] = $excluded_destinations;

        return $this;
    }

    /**
     * Gets ads_grouping
     *
     * @return string|null
     */
    public function getAdsGrouping()
    {
        return $this->container['ads_grouping'];
    }

    /**
     * Sets ads_grouping
     *
     * @param string|null $ads_grouping Used to group items in an arbitrary way. Only for CPA%, discouraged otherwise.
     *
     * @return self
     */
    public function setAdsGrouping($ads_grouping)
    {
        if (is_null($ads_grouping)) {
            throw new \InvalidArgumentException('non-nullable ads_grouping cannot be null');
        }
        $this->container['ads_grouping'] = $ads_grouping;

        return $this;
    }

    /**
     * Gets ads_labels
     *
     * @return string[]|null
     */
    public function getAdsLabels()
    {
        return $this->container['ads_labels'];
    }

    /**
     * Sets ads_labels
     *
     * @param string[]|null $ads_labels Similar to adsGrouping, but only works on CPC.
     *
     * @return self
     */
    public function setAdsLabels($ads_labels)
    {
        if (is_null($ads_labels)) {
            throw new \InvalidArgumentException('non-nullable ads_labels cannot be null');
        }
        $this->container['ads_labels'] = $ads_labels;

        return $this;
    }

    /**
     * Gets ads_redirect
     *
     * @return string|null
     */
    public function getAdsRedirect()
    {
        return $this->container['ads_redirect'];
    }

    /**
     * Sets ads_redirect
     *
     * @param string|null $ads_redirect Allows advertisers to override the item URL when the product is shown within the context of Product Ads.
     *
     * @return self
     */
    public function setAdsRedirect($ads_redirect)
    {
        if (is_null($ads_redirect)) {
            throw new \InvalidArgumentException('non-nullable ads_redirect cannot be null');
        }
        $this->container['ads_redirect'] = $ads_redirect;

        return $this;
    }

    /**
     * Gets product_types
     *
     * @return string[]|null
     */
    public function getProductTypes()
    {
        return $this->container['product_types'];
    }

    /**
     * Sets product_types
     *
     * @param string[]|null $product_types Categories of the item (formatted as in products data specification).
     *
     * @return self
     */
    public function setProductTypes($product_types)
    {
        if (is_null($product_types)) {
            throw new \InvalidArgumentException('non-nullable product_types cannot be null');
        }
        $this->container['product_types'] = $product_types;

        return $this;
    }

    /**
     * Gets age_group
     *
     * @return string|null
     */
    public function getAgeGroup()
    {
        return $this->container['age_group'];
    }

    /**
     * Sets age_group
     *
     * @param string|null $age_group Target age group of the item.
     *
     * @return self
     */
    public function setAgeGroup($age_group)
    {
        if (is_null($age_group)) {
            throw new \InvalidArgumentException('non-nullable age_group cannot be null');
        }
        $this->container['age_group'] = $age_group;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return string|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param string|null $availability Availability status of the item. RECOMMENDED.
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        if (is_null($availability)) {
            throw new \InvalidArgumentException('non-nullable availability cannot be null');
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition Condition or state of the item.
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender Target gender of the item.
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets size_system
     *
     * @return string|null
     */
    public function getSizeSystem()
    {
        return $this->container['size_system'];
    }

    /**
     * Sets size_system
     *
     * @param string|null $size_system System in which the size is specified. Recommended for apparel items.
     *
     * @return self
     */
    public function setSizeSystem($size_system)
    {
        if (is_null($size_system)) {
            throw new \InvalidArgumentException('non-nullable size_system cannot be null');
        }
        $this->container['size_system'] = $size_system;

        return $this;
    }

    /**
     * Gets size_type
     *
     * @return string|null
     */
    public function getSizeType()
    {
        return $this->container['size_type'];
    }

    /**
     * Sets size_type
     *
     * @param string|null $size_type The cut of the item. Recommended for apparel items.
     *
     * @return self
     */
    public function setSizeType($size_type)
    {
        if (is_null($size_type)) {
            throw new \InvalidArgumentException('non-nullable size_type cannot be null');
        }
        $this->container['size_type'] = $size_type;

        return $this;
    }

    /**
     * Gets energy_efficiency_class
     *
     * @return string|null
     */
    public function getEnergyEfficiencyClass()
    {
        return $this->container['energy_efficiency_class'];
    }

    /**
     * Sets energy_efficiency_class
     *
     * @param string|null $energy_efficiency_class The energy efficiency class as defined in EU directive 2010/30/EU.
     *
     * @return self
     */
    public function setEnergyEfficiencyClass($energy_efficiency_class)
    {
        if (is_null($energy_efficiency_class)) {
            throw new \InvalidArgumentException('non-nullable energy_efficiency_class cannot be null');
        }
        $this->container['energy_efficiency_class'] = $energy_efficiency_class;

        return $this;
    }

    /**
     * Gets min_energy_efficiency_class
     *
     * @return string|null
     */
    public function getMinEnergyEfficiencyClass()
    {
        return $this->container['min_energy_efficiency_class'];
    }

    /**
     * Sets min_energy_efficiency_class
     *
     * @param string|null $min_energy_efficiency_class The energy efficiency class as defined in EU directive 2010/30/EU.
     *
     * @return self
     */
    public function setMinEnergyEfficiencyClass($min_energy_efficiency_class)
    {
        if (is_null($min_energy_efficiency_class)) {
            throw new \InvalidArgumentException('non-nullable min_energy_efficiency_class cannot be null');
        }
        $this->container['min_energy_efficiency_class'] = $min_energy_efficiency_class;

        return $this;
    }

    /**
     * Gets max_energy_efficiency_class
     *
     * @return string|null
     */
    public function getMaxEnergyEfficiencyClass()
    {
        return $this->container['max_energy_efficiency_class'];
    }

    /**
     * Sets max_energy_efficiency_class
     *
     * @param string|null $max_energy_efficiency_class The energy efficiency class as defined in EU directive 2010/30/EU.
     *
     * @return self
     */
    public function setMaxEnergyEfficiencyClass($max_energy_efficiency_class)
    {
        if (is_null($max_energy_efficiency_class)) {
            throw new \InvalidArgumentException('non-nullable max_energy_efficiency_class cannot be null');
        }
        $this->container['max_energy_efficiency_class'] = $max_energy_efficiency_class;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return string|null
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param string|null $tax_category The tax category of the product, used to configure detailed tax nexus in account-level tax settings.
     *
     * @return self
     */
    public function setTaxCategory($tax_category)
    {
        if (is_null($tax_category)) {
            throw new \InvalidArgumentException('non-nullable tax_category cannot be null');
        }
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets transit_time_label
     *
     * @return string|null
     */
    public function getTransitTimeLabel()
    {
        return $this->container['transit_time_label'];
    }

    /**
     * Sets transit_time_label
     *
     * @param string|null $transit_time_label The transit time label of the product, used to group product in account-level transit time tables.
     *
     * @return self
     */
    public function setTransitTimeLabel($transit_time_label)
    {
        if (is_null($transit_time_label)) {
            throw new \InvalidArgumentException('non-nullable transit_time_label cannot be null');
        }
        $this->container['transit_time_label'] = $transit_time_label;

        return $this;
    }

    /**
     * Gets seller_id
     *
     * @return string|null
     */
    public function getSellerId()
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     *
     * @param string|null $seller_id The ID of the seller (case sensitive and 50 UTF8 characters max). This information is required by the Criteo Offsite Ads.
     *
     * @return self
     */
    public function setSellerId($seller_id)
    {
        if (is_null($seller_id)) {
            throw new \InvalidArgumentException('non-nullable seller_id cannot be null');
        }
        $this->container['seller_id'] = $seller_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


