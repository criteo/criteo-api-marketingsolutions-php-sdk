<?php
/**
 * GenerateCreativesReportRequestAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * GenerateCreativesReportRequestAttributes Class Doc Comment
 *
 * @category Class
 * @description This is the message defining the query for Creatives report
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GenerateCreativesReportRequestAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GenerateCreativesReportRequestAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'advertiser_ids' => 'string[]',
        'metrics' => 'string[]',
        'dimensions' => 'string[]',
        'timezone' => 'string',
        'ad_formats' => 'string[]',
        'display_sizes' => 'string[]',
        'coupon_names' => 'string[]',
        'coupon_ids' => 'string[]',
        'ad_names' => 'string[]',
        'ad_ids' => 'string[]',
        'campaign_ids' => 'string[]',
        'ad_set_ids' => 'string[]',
        'ad_set_status' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'advertiser_ids' => null,
        'metrics' => null,
        'dimensions' => null,
        'timezone' => null,
        'ad_formats' => null,
        'display_sizes' => null,
        'coupon_names' => null,
        'coupon_ids' => null,
        'ad_names' => null,
        'ad_ids' => null,
        'campaign_ids' => null,
        'ad_set_ids' => null,
        'ad_set_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_date' => false,
		'end_date' => false,
		'advertiser_ids' => false,
		'metrics' => false,
		'dimensions' => false,
		'timezone' => false,
		'ad_formats' => false,
		'display_sizes' => false,
		'coupon_names' => false,
		'coupon_ids' => false,
		'ad_names' => false,
		'ad_ids' => false,
		'campaign_ids' => false,
		'ad_set_ids' => false,
		'ad_set_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'advertiser_ids' => 'advertiserIds',
        'metrics' => 'metrics',
        'dimensions' => 'dimensions',
        'timezone' => 'timezone',
        'ad_formats' => 'adFormats',
        'display_sizes' => 'displaySizes',
        'coupon_names' => 'couponNames',
        'coupon_ids' => 'couponIds',
        'ad_names' => 'adNames',
        'ad_ids' => 'adIds',
        'campaign_ids' => 'campaignIds',
        'ad_set_ids' => 'adSetIds',
        'ad_set_status' => 'adSetStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'advertiser_ids' => 'setAdvertiserIds',
        'metrics' => 'setMetrics',
        'dimensions' => 'setDimensions',
        'timezone' => 'setTimezone',
        'ad_formats' => 'setAdFormats',
        'display_sizes' => 'setDisplaySizes',
        'coupon_names' => 'setCouponNames',
        'coupon_ids' => 'setCouponIds',
        'ad_names' => 'setAdNames',
        'ad_ids' => 'setAdIds',
        'campaign_ids' => 'setCampaignIds',
        'ad_set_ids' => 'setAdSetIds',
        'ad_set_status' => 'setAdSetStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'advertiser_ids' => 'getAdvertiserIds',
        'metrics' => 'getMetrics',
        'dimensions' => 'getDimensions',
        'timezone' => 'getTimezone',
        'ad_formats' => 'getAdFormats',
        'display_sizes' => 'getDisplaySizes',
        'coupon_names' => 'getCouponNames',
        'coupon_ids' => 'getCouponIds',
        'ad_names' => 'getAdNames',
        'ad_ids' => 'getAdIds',
        'campaign_ids' => 'getCampaignIds',
        'ad_set_ids' => 'getAdSetIds',
        'ad_set_status' => 'getAdSetStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const METRICS_CLICKS = 'Clicks';
    public const METRICS_CTR = 'Ctr';
    public const METRICS_DISPLAYS = 'Displays';
    public const DIMENSIONS_AD_FORMAT = 'AdFormat';
    public const DIMENSIONS_COUPON = 'Coupon';
    public const DIMENSIONS_COUPON_ID = 'CouponId';
    public const DIMENSIONS_DISPLAY_SIZE = 'DisplaySize';
    public const DIMENSIONS_SIZE_CATEGORY = 'SizeCategory';
    public const DIMENSIONS_AD = 'Ad';
    public const DIMENSIONS_AD_ID = 'AdId';
    public const DIMENSIONS_DAY = 'Day';
    public const DIMENSIONS_HOUR = 'Hour';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMetricsAllowableValues()
    {
        return [
            self::METRICS_CLICKS,
            self::METRICS_CTR,
            self::METRICS_DISPLAYS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDimensionsAllowableValues()
    {
        return [
            self::DIMENSIONS_AD_FORMAT,
            self::DIMENSIONS_COUPON,
            self::DIMENSIONS_COUPON_ID,
            self::DIMENSIONS_DISPLAY_SIZE,
            self::DIMENSIONS_SIZE_CATEGORY,
            self::DIMENSIONS_AD,
            self::DIMENSIONS_AD_ID,
            self::DIMENSIONS_DAY,
            self::DIMENSIONS_HOUR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('advertiser_ids', $data ?? [], null);
        $this->setIfExists('metrics', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('ad_formats', $data ?? [], null);
        $this->setIfExists('display_sizes', $data ?? [], null);
        $this->setIfExists('coupon_names', $data ?? [], null);
        $this->setIfExists('coupon_ids', $data ?? [], null);
        $this->setIfExists('ad_names', $data ?? [], null);
        $this->setIfExists('ad_ids', $data ?? [], null);
        $this->setIfExists('campaign_ids', $data ?? [], null);
        $this->setIfExists('ad_set_ids', $data ?? [], null);
        $this->setIfExists('ad_set_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['advertiser_ids'] === null) {
            $invalidProperties[] = "'advertiser_ids' can't be null";
        }
        if ($this->container['metrics'] === null) {
            $invalidProperties[] = "'metrics' can't be null";
        }
        if ($this->container['dimensions'] === null) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date End date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets advertiser_ids
     *
     * @return string[]
     */
    public function getAdvertiserIds()
    {
        return $this->container['advertiser_ids'];
    }

    /**
     * Sets advertiser_ids
     *
     * @param string[] $advertiser_ids The list of client ids.
     *
     * @return self
     */
    public function setAdvertiserIds($advertiser_ids)
    {
        if (is_null($advertiser_ids)) {
            throw new \InvalidArgumentException('non-nullable advertiser_ids cannot be null');
        }


        $this->container['advertiser_ids'] = $advertiser_ids;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return string[]
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param string[] $metrics The list of metrics to report.
     *
     * @return self
     */
    public function setMetrics($metrics)
    {
        if (is_null($metrics)) {
            throw new \InvalidArgumentException('non-nullable metrics cannot be null');
        }
        $allowedValues = $this->getMetricsAllowableValues();
        if (array_diff($metrics, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'metrics', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return string[]
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param string[] $dimensions The list of dimensions to report.
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $allowedValues = $this->getDimensionsAllowableValues();
        if (array_diff($dimensions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dimensions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone The timezone used for the report. Timezone Database format (Tz).
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets ad_formats
     *
     * @return string[]|null
     */
    public function getAdFormats()
    {
        return $this->container['ad_formats'];
    }

    /**
     * Sets ad_formats
     *
     * @param string[]|null $ad_formats The list of adFormats.
     *
     * @return self
     */
    public function setAdFormats($ad_formats)
    {
        if (is_null($ad_formats)) {
            throw new \InvalidArgumentException('non-nullable ad_formats cannot be null');
        }


        $this->container['ad_formats'] = $ad_formats;

        return $this;
    }

    /**
     * Gets display_sizes
     *
     * @return string[]|null
     */
    public function getDisplaySizes()
    {
        return $this->container['display_sizes'];
    }

    /**
     * Sets display_sizes
     *
     * @param string[]|null $display_sizes The list of displaySizes.
     *
     * @return self
     */
    public function setDisplaySizes($display_sizes)
    {
        if (is_null($display_sizes)) {
            throw new \InvalidArgumentException('non-nullable display_sizes cannot be null');
        }


        $this->container['display_sizes'] = $display_sizes;

        return $this;
    }

    /**
     * Gets coupon_names
     *
     * @return string[]|null
     */
    public function getCouponNames()
    {
        return $this->container['coupon_names'];
    }

    /**
     * Sets coupon_names
     *
     * @param string[]|null $coupon_names The list of coupon names.
     *
     * @return self
     */
    public function setCouponNames($coupon_names)
    {
        if (is_null($coupon_names)) {
            throw new \InvalidArgumentException('non-nullable coupon_names cannot be null');
        }


        $this->container['coupon_names'] = $coupon_names;

        return $this;
    }

    /**
     * Gets coupon_ids
     *
     * @return string[]|null
     */
    public function getCouponIds()
    {
        return $this->container['coupon_ids'];
    }

    /**
     * Sets coupon_ids
     *
     * @param string[]|null $coupon_ids The list of coupon ids.
     *
     * @return self
     */
    public function setCouponIds($coupon_ids)
    {
        if (is_null($coupon_ids)) {
            throw new \InvalidArgumentException('non-nullable coupon_ids cannot be null');
        }


        $this->container['coupon_ids'] = $coupon_ids;

        return $this;
    }

    /**
     * Gets ad_names
     *
     * @return string[]|null
     */
    public function getAdNames()
    {
        return $this->container['ad_names'];
    }

    /**
     * Sets ad_names
     *
     * @param string[]|null $ad_names The list of ad names.
     *
     * @return self
     */
    public function setAdNames($ad_names)
    {
        if (is_null($ad_names)) {
            throw new \InvalidArgumentException('non-nullable ad_names cannot be null');
        }


        $this->container['ad_names'] = $ad_names;

        return $this;
    }

    /**
     * Gets ad_ids
     *
     * @return string[]|null
     */
    public function getAdIds()
    {
        return $this->container['ad_ids'];
    }

    /**
     * Sets ad_ids
     *
     * @param string[]|null $ad_ids The list of ad ids.
     *
     * @return self
     */
    public function setAdIds($ad_ids)
    {
        if (is_null($ad_ids)) {
            throw new \InvalidArgumentException('non-nullable ad_ids cannot be null');
        }


        $this->container['ad_ids'] = $ad_ids;

        return $this;
    }

    /**
     * Gets campaign_ids
     *
     * @return string[]|null
     */
    public function getCampaignIds()
    {
        return $this->container['campaign_ids'];
    }

    /**
     * Sets campaign_ids
     *
     * @param string[]|null $campaign_ids The list of campaign ids (marketing campaign ids).
     *
     * @return self
     */
    public function setCampaignIds($campaign_ids)
    {
        if (is_null($campaign_ids)) {
            throw new \InvalidArgumentException('non-nullable campaign_ids cannot be null');
        }


        $this->container['campaign_ids'] = $campaign_ids;

        return $this;
    }

    /**
     * Gets ad_set_ids
     *
     * @return string[]|null
     */
    public function getAdSetIds()
    {
        return $this->container['ad_set_ids'];
    }

    /**
     * Sets ad_set_ids
     *
     * @param string[]|null $ad_set_ids The list of adSet ids (campaign ids).
     *
     * @return self
     */
    public function setAdSetIds($ad_set_ids)
    {
        if (is_null($ad_set_ids)) {
            throw new \InvalidArgumentException('non-nullable ad_set_ids cannot be null');
        }


        $this->container['ad_set_ids'] = $ad_set_ids;

        return $this;
    }

    /**
     * Gets ad_set_status
     *
     * @return string[]|null
     */
    public function getAdSetStatus()
    {
        return $this->container['ad_set_status'];
    }

    /**
     * Sets ad_set_status
     *
     * @param string[]|null $ad_set_status The list of adSet status (ex: 'Active','NotRunning').
     *
     * @return self
     */
    public function setAdSetStatus($ad_set_status)
    {
        if (is_null($ad_set_status)) {
            throw new \InvalidArgumentException('non-nullable ad_set_status cannot be null');
        }


        $this->container['ad_set_status'] = $ad_set_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


