<?php
/**
 * StatisticsRecord
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * StatisticsRecord Class Doc Comment
 *
 * @category Class
 * @description The format  statistics report for a period between startDate and endDate
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StatisticsRecord implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StatisticsRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'total' => 'int',
        'variant' => 'int',
        'displayable' => 'int',
        'non_displayable' => 'int',
        'added' => 'int',
        'deleted' => 'int',
        'updated' => 'int',
        'blacklisted' => 'int',
        'out_of_stock' => 'int',
        'missing_image' => 'int',
        'missing_url' => 'int',
        'missing_price' => 'int',
        'missing_name' => 'int',
        'missing_description' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'total' => 'int64',
        'variant' => 'int64',
        'displayable' => 'int64',
        'non_displayable' => 'int64',
        'added' => 'int64',
        'deleted' => 'int64',
        'updated' => 'int64',
        'blacklisted' => 'int64',
        'out_of_stock' => 'int64',
        'missing_image' => 'int64',
        'missing_url' => 'int64',
        'missing_price' => 'int64',
        'missing_name' => 'int64',
        'missing_description' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_date' => false,
		'end_date' => false,
		'total' => false,
		'variant' => false,
		'displayable' => false,
		'non_displayable' => false,
		'added' => false,
		'deleted' => false,
		'updated' => false,
		'blacklisted' => false,
		'out_of_stock' => false,
		'missing_image' => false,
		'missing_url' => false,
		'missing_price' => false,
		'missing_name' => false,
		'missing_description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'total' => 'total',
        'variant' => 'variant',
        'displayable' => 'displayable',
        'non_displayable' => 'nonDisplayable',
        'added' => 'added',
        'deleted' => 'deleted',
        'updated' => 'updated',
        'blacklisted' => 'blacklisted',
        'out_of_stock' => 'outOfStock',
        'missing_image' => 'missingImage',
        'missing_url' => 'missingUrl',
        'missing_price' => 'missingPrice',
        'missing_name' => 'missingName',
        'missing_description' => 'missingDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'total' => 'setTotal',
        'variant' => 'setVariant',
        'displayable' => 'setDisplayable',
        'non_displayable' => 'setNonDisplayable',
        'added' => 'setAdded',
        'deleted' => 'setDeleted',
        'updated' => 'setUpdated',
        'blacklisted' => 'setBlacklisted',
        'out_of_stock' => 'setOutOfStock',
        'missing_image' => 'setMissingImage',
        'missing_url' => 'setMissingUrl',
        'missing_price' => 'setMissingPrice',
        'missing_name' => 'setMissingName',
        'missing_description' => 'setMissingDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'total' => 'getTotal',
        'variant' => 'getVariant',
        'displayable' => 'getDisplayable',
        'non_displayable' => 'getNonDisplayable',
        'added' => 'getAdded',
        'deleted' => 'getDeleted',
        'updated' => 'getUpdated',
        'blacklisted' => 'getBlacklisted',
        'out_of_stock' => 'getOutOfStock',
        'missing_image' => 'getMissingImage',
        'missing_url' => 'getMissingUrl',
        'missing_price' => 'getMissingPrice',
        'missing_name' => 'getMissingName',
        'missing_description' => 'getMissingDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('variant', $data ?? [], null);
        $this->setIfExists('displayable', $data ?? [], null);
        $this->setIfExists('non_displayable', $data ?? [], null);
        $this->setIfExists('added', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('blacklisted', $data ?? [], null);
        $this->setIfExists('out_of_stock', $data ?? [], null);
        $this->setIfExists('missing_image', $data ?? [], null);
        $this->setIfExists('missing_url', $data ?? [], null);
        $this->setIfExists('missing_price', $data ?? [], null);
        $this->setIfExists('missing_name', $data ?? [], null);
        $this->setIfExists('missing_description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if ($this->container['variant'] === null) {
            $invalidProperties[] = "'variant' can't be null";
        }
        if ($this->container['displayable'] === null) {
            $invalidProperties[] = "'displayable' can't be null";
        }
        if ($this->container['non_displayable'] === null) {
            $invalidProperties[] = "'non_displayable' can't be null";
        }
        if ($this->container['added'] === null) {
            $invalidProperties[] = "'added' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['updated'] === null) {
            $invalidProperties[] = "'updated' can't be null";
        }
        if ($this->container['blacklisted'] === null) {
            $invalidProperties[] = "'blacklisted' can't be null";
        }
        if ($this->container['out_of_stock'] === null) {
            $invalidProperties[] = "'out_of_stock' can't be null";
        }
        if ($this->container['missing_image'] === null) {
            $invalidProperties[] = "'missing_image' can't be null";
        }
        if ($this->container['missing_url'] === null) {
            $invalidProperties[] = "'missing_url' can't be null";
        }
        if ($this->container['missing_price'] === null) {
            $invalidProperties[] = "'missing_price' can't be null";
        }
        if ($this->container['missing_name'] === null) {
            $invalidProperties[] = "'missing_name' can't be null";
        }
        if ($this->container['missing_description'] === null) {
            $invalidProperties[] = "'missing_description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start date of streaming products collection
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date End date of streaming products collection
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total The number of total products at endDate moment
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets variant
     *
     * @return int
     */
    public function getVariant()
    {
        return $this->container['variant'];
    }

    /**
     * Sets variant
     *
     * @param int $variant The number of total variant products at endDate moment
     *
     * @return self
     */
    public function setVariant($variant)
    {
        if (is_null($variant)) {
            throw new \InvalidArgumentException('non-nullable variant cannot be null');
        }
        $this->container['variant'] = $variant;

        return $this;
    }

    /**
     * Gets displayable
     *
     * @return int
     */
    public function getDisplayable()
    {
        return $this->container['displayable'];
    }

    /**
     * Sets displayable
     *
     * @param int $displayable The number of total displayable products at endDate moment
     *
     * @return self
     */
    public function setDisplayable($displayable)
    {
        if (is_null($displayable)) {
            throw new \InvalidArgumentException('non-nullable displayable cannot be null');
        }
        $this->container['displayable'] = $displayable;

        return $this;
    }

    /**
     * Gets non_displayable
     *
     * @return int
     */
    public function getNonDisplayable()
    {
        return $this->container['non_displayable'];
    }

    /**
     * Sets non_displayable
     *
     * @param int $non_displayable The number of total non-displayable products at endDate moment
     *
     * @return self
     */
    public function setNonDisplayable($non_displayable)
    {
        if (is_null($non_displayable)) {
            throw new \InvalidArgumentException('non-nullable non_displayable cannot be null');
        }
        $this->container['non_displayable'] = $non_displayable;

        return $this;
    }

    /**
     * Gets added
     *
     * @return int
     */
    public function getAdded()
    {
        return $this->container['added'];
    }

    /**
     * Sets added
     *
     * @param int $added The number of inserted products during the period between startDate and endDate
     *
     * @return self
     */
    public function setAdded($added)
    {
        if (is_null($added)) {
            throw new \InvalidArgumentException('non-nullable added cannot be null');
        }
        $this->container['added'] = $added;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return int
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param int $deleted The number of deleted products during the period between startDate and endDate
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return int
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param int $updated The number of updated products during the period between startDate and endDate
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets blacklisted
     *
     * @return int
     */
    public function getBlacklisted()
    {
        return $this->container['blacklisted'];
    }

    /**
     * Sets blacklisted
     *
     * @param int $blacklisted The number of total blacklisted products at endDate moment
     *
     * @return self
     */
    public function setBlacklisted($blacklisted)
    {
        if (is_null($blacklisted)) {
            throw new \InvalidArgumentException('non-nullable blacklisted cannot be null');
        }
        $this->container['blacklisted'] = $blacklisted;

        return $this;
    }

    /**
     * Gets out_of_stock
     *
     * @return int
     */
    public function getOutOfStock()
    {
        return $this->container['out_of_stock'];
    }

    /**
     * Sets out_of_stock
     *
     * @param int $out_of_stock The number of total out-of-stock products at endDate moment
     *
     * @return self
     */
    public function setOutOfStock($out_of_stock)
    {
        if (is_null($out_of_stock)) {
            throw new \InvalidArgumentException('non-nullable out_of_stock cannot be null');
        }
        $this->container['out_of_stock'] = $out_of_stock;

        return $this;
    }

    /**
     * Gets missing_image
     *
     * @return int
     */
    public function getMissingImage()
    {
        return $this->container['missing_image'];
    }

    /**
     * Sets missing_image
     *
     * @param int $missing_image The number of total missing image products at endDate moment
     *
     * @return self
     */
    public function setMissingImage($missing_image)
    {
        if (is_null($missing_image)) {
            throw new \InvalidArgumentException('non-nullable missing_image cannot be null');
        }
        $this->container['missing_image'] = $missing_image;

        return $this;
    }

    /**
     * Gets missing_url
     *
     * @return int
     */
    public function getMissingUrl()
    {
        return $this->container['missing_url'];
    }

    /**
     * Sets missing_url
     *
     * @param int $missing_url The number of total missing url products at endDate moment
     *
     * @return self
     */
    public function setMissingUrl($missing_url)
    {
        if (is_null($missing_url)) {
            throw new \InvalidArgumentException('non-nullable missing_url cannot be null');
        }
        $this->container['missing_url'] = $missing_url;

        return $this;
    }

    /**
     * Gets missing_price
     *
     * @return int
     */
    public function getMissingPrice()
    {
        return $this->container['missing_price'];
    }

    /**
     * Sets missing_price
     *
     * @param int $missing_price The number of total missing price products at endDate moment
     *
     * @return self
     */
    public function setMissingPrice($missing_price)
    {
        if (is_null($missing_price)) {
            throw new \InvalidArgumentException('non-nullable missing_price cannot be null');
        }
        $this->container['missing_price'] = $missing_price;

        return $this;
    }

    /**
     * Gets missing_name
     *
     * @return int
     */
    public function getMissingName()
    {
        return $this->container['missing_name'];
    }

    /**
     * Sets missing_name
     *
     * @param int $missing_name The number of total missing name products at endDate moment
     *
     * @return self
     */
    public function setMissingName($missing_name)
    {
        if (is_null($missing_name)) {
            throw new \InvalidArgumentException('non-nullable missing_name cannot be null');
        }
        $this->container['missing_name'] = $missing_name;

        return $this;
    }

    /**
     * Gets missing_description
     *
     * @return int
     */
    public function getMissingDescription()
    {
        return $this->container['missing_description'];
    }

    /**
     * Sets missing_description
     *
     * @param int $missing_description The number of total missing description products at endDate moment
     *
     * @return self
     */
    public function setMissingDescription($missing_description)
    {
        if (is_null($missing_description)) {
            throw new \InvalidArgumentException('non-nullable missing_description cannot be null');
        }
        $this->container['missing_description'] = $missing_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


