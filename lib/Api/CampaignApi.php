<?php
/**
 * CampaignApi
 * PHP version 7.4
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use criteo\api\marketingsolutions\preview\ApiException;
use criteo\api\marketingsolutions\preview\Configuration;
use criteo\api\marketingsolutions\preview\HeaderSelector;
use criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * CampaignApi Class Doc Comment
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAdSetV24Q1' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createCampaign' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteAdvertiserBundleRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteAdvertiserDomainRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteCampaignBundleRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteCampaignDomainRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteOCIbrandSafetyRule' => [
            'application/json',
        ],
        'deleteOCItargetingRule' => [
            'application/json',
        ],
        'disableAdSetTargetingDealIds' => [
            'application/json',
        ],
        'disableAdSetTargetingVideoPositioning' => [
            'application/json',
        ],
        'getAdSetTargetingDealIds' => [
            'application/json',
        ],
        'getAdSetTargetingVideoPositioning' => [
            'application/json',
        ],
        'getAdSetV24Q1' => [
            'application/json',
        ],
        'getAdvertiserBundleRules' => [
            'application/json',
        ],
        'getAdvertiserDomainRules' => [
            'application/json',
        ],
        'getCampaignBundleRules' => [
            'application/json',
        ],
        'getCampaignDomainRules' => [
            'application/json',
        ],
        'getCampaignV23Q1' => [
            'application/json',
        ],
        'getCategoryBidList' => [
            'application/json',
        ],
        'getDisplayMultipliers' => [
            'application/json',
        ],
        'getOCIbrandSafetyRule' => [
            'application/json',
        ],
        'getOCItargetingRule' => [
            'application/json',
        ],
        'getSupplyVendorList' => [
            'application/json',
        ],
        'patchAdSetsV24Q1' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'patchCampaigns' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'patchCategoryBidList' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'patchDisplayMultipliers' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'postAdvertiserBundleRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'postAdvertiserDomainRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'postCampaignBundleRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'postCampaignDomainRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'putAdvertiserBundleRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'putAdvertiserDomainRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'putCampaignBundleRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'putCampaignDomainRules' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'searchAdSetsV24Q1' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'searchCampaignsV23Q1' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setAdSetTargetingDealIds' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setAdSetTargetingVideoPositioning' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'startAdSets' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'stopAdSets' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateAdSetAudience' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'upsertOCIbrandSafetyRule' => [
            'application/json',
        ],
        'upsertOCItargetingRule' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAdSetV24Q1
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetV24Q1Request $create_ad_set_v24_q1_request the ad sets to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1
     */
    public function createAdSetV24Q1($create_ad_set_v24_q1_request, string $contentType = self::contentTypes['createAdSetV24Q1'][0])
    {
        list($response) = $this->createAdSetV24Q1WithHttpInfo($create_ad_set_v24_q1_request, $contentType);
        return $response;
    }

    /**
     * Operation createAdSetV24Q1WithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetV24Q1Request $create_ad_set_v24_q1_request the ad sets to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdSetV24Q1WithHttpInfo($create_ad_set_v24_q1_request, string $contentType = self::contentTypes['createAdSetV24Q1'][0])
    {
        $request = $this->createAdSetV24Q1Request($create_ad_set_v24_q1_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdSetV24Q1Async
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetV24Q1Request $create_ad_set_v24_q1_request the ad sets to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdSetV24Q1Async($create_ad_set_v24_q1_request, string $contentType = self::contentTypes['createAdSetV24Q1'][0])
    {
        return $this->createAdSetV24Q1AsyncWithHttpInfo($create_ad_set_v24_q1_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdSetV24Q1AsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetV24Q1Request $create_ad_set_v24_q1_request the ad sets to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdSetV24Q1AsyncWithHttpInfo($create_ad_set_v24_q1_request, string $contentType = self::contentTypes['createAdSetV24Q1'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1';
        $request = $this->createAdSetV24Q1Request($create_ad_set_v24_q1_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdSetV24Q1'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetV24Q1Request $create_ad_set_v24_q1_request the ad sets to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAdSetV24Q1Request($create_ad_set_v24_q1_request, string $contentType = self::contentTypes['createAdSetV24Q1'][0])
    {

        // verify the required parameter 'create_ad_set_v24_q1_request' is set
        if ($create_ad_set_v24_q1_request === null || (is_array($create_ad_set_v24_q1_request) && count($create_ad_set_v24_q1_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_ad_set_v24_q1_request when calling createAdSetV24Q1'
            );
        }


        $resourcePath = '/preview/marketing-solutions/ad-sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_ad_set_v24_q1_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_ad_set_v24_q1_request));
            } else {
                $httpBody = $create_ad_set_v24_q1_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCampaign
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request the campaigns to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response
     */
    public function createCampaign($create_campaign_request, string $contentType = self::contentTypes['createCampaign'][0])
    {
        list($response) = $this->createCampaignWithHttpInfo($create_campaign_request, $contentType);
        return $response;
    }

    /**
     * Operation createCampaignWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request the campaigns to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCampaignWithHttpInfo($create_campaign_request, string $contentType = self::contentTypes['createCampaign'][0])
    {
        $request = $this->createCampaignRequest($create_campaign_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCampaignAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request the campaigns to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignAsync($create_campaign_request, string $contentType = self::contentTypes['createCampaign'][0])
    {
        return $this->createCampaignAsyncWithHttpInfo($create_campaign_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCampaignAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request the campaigns to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignAsyncWithHttpInfo($create_campaign_request, string $contentType = self::contentTypes['createCampaign'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response';
        $request = $this->createCampaignRequest($create_campaign_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCampaign'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request the campaigns to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCampaignRequest($create_campaign_request, string $contentType = self::contentTypes['createCampaign'][0])
    {

        // verify the required parameter 'create_campaign_request' is set
        if ($create_campaign_request === null || (is_array($create_campaign_request) && count($create_campaign_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_campaign_request when calling createCampaign'
            );
        }


        $resourcePath = '/preview/marketing-solutions/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_campaign_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_campaign_request));
            } else {
                $httpBody = $create_campaign_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAdvertiserBundleRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function deleteAdvertiserBundleRules($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserBundleRules'][0])
    {
        list($response) = $this->deleteAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation deleteAdvertiserBundleRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserBundleRules'][0])
    {
        $request = $this->deleteAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdvertiserBundleRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserBundleRulesAsync($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserBundleRules'][0])
    {
        return $this->deleteAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdvertiserBundleRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserBundleRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->deleteAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAdvertiserBundleRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserBundleRules'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling deleteAdvertiserBundleRules'
            );
        }



        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAdvertiserDomainRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function deleteAdvertiserDomainRules($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserDomainRules'][0])
    {
        list($response) = $this->deleteAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation deleteAdvertiserDomainRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserDomainRules'][0])
    {
        $request = $this->deleteAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdvertiserDomainRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserDomainRulesAsync($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserDomainRules'][0])
    {
        return $this->deleteAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdvertiserDomainRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserDomainRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->deleteAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAdvertiserDomainRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteAdvertiserDomainRules'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling deleteAdvertiserDomainRules'
            );
        }



        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCampaignBundleRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function deleteCampaignBundleRules($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignBundleRules'][0])
    {
        list($response) = $this->deleteCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation deleteCampaignBundleRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignBundleRules'][0])
    {
        $request = $this->deleteCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignBundleRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignBundleRulesAsync($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignBundleRules'][0])
    {
        return $this->deleteCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignBundleRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignBundleRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->deleteCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaignBundleRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignBundleRules'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteCampaignBundleRules'
            );
        }



        $resourcePath = '/preview/campaigns/{campaignId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCampaignDomainRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function deleteCampaignDomainRules($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignDomainRules'][0])
    {
        list($response) = $this->deleteCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation deleteCampaignDomainRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignDomainRules'][0])
    {
        $request = $this->deleteCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignDomainRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignDomainRulesAsync($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignDomainRules'][0])
    {
        return $this->deleteCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignDomainRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignDomainRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->deleteCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaignDomainRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['deleteCampaignDomainRules'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteCampaignDomainRules'
            );
        }



        $resourcePath = '/preview/campaigns/{campaignId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOCIbrandSafetyRule
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOCIbrandSafetyRule($target_type, $target_id, string $contentType = self::contentTypes['deleteOCIbrandSafetyRule'][0])
    {
        $this->deleteOCIbrandSafetyRuleWithHttpInfo($target_type, $target_id, $contentType);
    }

    /**
     * Operation deleteOCIbrandSafetyRuleWithHttpInfo
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOCIbrandSafetyRuleWithHttpInfo($target_type, $target_id, string $contentType = self::contentTypes['deleteOCIbrandSafetyRule'][0])
    {
        $request = $this->deleteOCIbrandSafetyRuleRequest($target_type, $target_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOCIbrandSafetyRuleAsync
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOCIbrandSafetyRuleAsync($target_type, $target_id, string $contentType = self::contentTypes['deleteOCIbrandSafetyRule'][0])
    {
        return $this->deleteOCIbrandSafetyRuleAsyncWithHttpInfo($target_type, $target_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOCIbrandSafetyRuleAsyncWithHttpInfo
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOCIbrandSafetyRuleAsyncWithHttpInfo($target_type, $target_id, string $contentType = self::contentTypes['deleteOCIbrandSafetyRule'][0])
    {
        $returnType = '';
        $request = $this->deleteOCIbrandSafetyRuleRequest($target_type, $target_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOCIbrandSafetyRule'
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOCIbrandSafetyRuleRequest($target_type, $target_id, string $contentType = self::contentTypes['deleteOCIbrandSafetyRule'][0])
    {

        // verify the required parameter 'target_type' is set
        if ($target_type === null || (is_array($target_type) && count($target_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_type when calling deleteOCIbrandSafetyRule'
            );
        }

        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling deleteOCIbrandSafetyRule'
            );
        }
        if ($target_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$target_id" when calling CampaignApi.deleteOCIbrandSafetyRule, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/preview/brand-safety/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_type,
            'target-type', // param base name
            'TargetType', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_id,
            'target-id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOCItargetingRule
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOCItargetingRule($target_type, $target_id, string $contentType = self::contentTypes['deleteOCItargetingRule'][0])
    {
        $this->deleteOCItargetingRuleWithHttpInfo($target_type, $target_id, $contentType);
    }

    /**
     * Operation deleteOCItargetingRuleWithHttpInfo
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOCItargetingRuleWithHttpInfo($target_type, $target_id, string $contentType = self::contentTypes['deleteOCItargetingRule'][0])
    {
        $request = $this->deleteOCItargetingRuleRequest($target_type, $target_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOCItargetingRuleAsync
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOCItargetingRuleAsync($target_type, $target_id, string $contentType = self::contentTypes['deleteOCItargetingRule'][0])
    {
        return $this->deleteOCItargetingRuleAsyncWithHttpInfo($target_type, $target_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOCItargetingRuleAsyncWithHttpInfo
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOCItargetingRuleAsyncWithHttpInfo($target_type, $target_id, string $contentType = self::contentTypes['deleteOCItargetingRule'][0])
    {
        $returnType = '';
        $request = $this->deleteOCItargetingRuleRequest($target_type, $target_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOCItargetingRule'
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOCItargetingRuleRequest($target_type, $target_id, string $contentType = self::contentTypes['deleteOCItargetingRule'][0])
    {

        // verify the required parameter 'target_type' is set
        if ($target_type === null || (is_array($target_type) && count($target_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_type when calling deleteOCItargetingRule'
            );
        }

        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling deleteOCItargetingRule'
            );
        }
        if ($target_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$target_id" when calling CampaignApi.deleteOCItargetingRule, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/preview/targeting/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_type,
            'target-type', // param base name
            'TargetType', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_id,
            'target-id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disableAdSetTargetingDealIds
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsDisableResultResponse
     */
    public function disableAdSetTargetingDealIds($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingDealIds'][0])
    {
        list($response) = $this->disableAdSetTargetingDealIdsWithHttpInfo($ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation disableAdSetTargetingDealIdsWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsDisableResultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableAdSetTargetingDealIdsWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingDealIds'][0])
    {
        $request = $this->disableAdSetTargetingDealIdsRequest($ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsDisableResultResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsDisableResultResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsDisableResultResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsDisableResultResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsDisableResultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disableAdSetTargetingDealIdsAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableAdSetTargetingDealIdsAsync($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingDealIds'][0])
    {
        return $this->disableAdSetTargetingDealIdsAsyncWithHttpInfo($ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disableAdSetTargetingDealIdsAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableAdSetTargetingDealIdsAsyncWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingDealIds'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsDisableResultResponse';
        $request = $this->disableAdSetTargetingDealIdsRequest($ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disableAdSetTargetingDealIds'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disableAdSetTargetingDealIdsRequest($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingDealIds'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling disableAdSetTargetingDealIds'
            );
        }


        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/deal-ids/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disableAdSetTargetingVideoPositioning
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningDisableResultResponse
     */
    public function disableAdSetTargetingVideoPositioning($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingVideoPositioning'][0])
    {
        list($response) = $this->disableAdSetTargetingVideoPositioningWithHttpInfo($ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation disableAdSetTargetingVideoPositioningWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningDisableResultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableAdSetTargetingVideoPositioningWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingVideoPositioning'][0])
    {
        $request = $this->disableAdSetTargetingVideoPositioningRequest($ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningDisableResultResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningDisableResultResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningDisableResultResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningDisableResultResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningDisableResultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disableAdSetTargetingVideoPositioningAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableAdSetTargetingVideoPositioningAsync($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingVideoPositioning'][0])
    {
        return $this->disableAdSetTargetingVideoPositioningAsyncWithHttpInfo($ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disableAdSetTargetingVideoPositioningAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableAdSetTargetingVideoPositioningAsyncWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingVideoPositioning'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningDisableResultResponse';
        $request = $this->disableAdSetTargetingVideoPositioningRequest($ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disableAdSetTargetingVideoPositioning'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disableAdSetTargetingVideoPositioningRequest($ad_set_id, string $contentType = self::contentTypes['disableAdSetTargetingVideoPositioning'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling disableAdSetTargetingVideoPositioning'
            );
        }


        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/video-positionings/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdSetTargetingDealIds
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsResponse
     */
    public function getAdSetTargetingDealIds($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingDealIds'][0])
    {
        list($response) = $this->getAdSetTargetingDealIdsWithHttpInfo($ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation getAdSetTargetingDealIdsWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdSetTargetingDealIdsWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingDealIds'][0])
    {
        $request = $this->getAdSetTargetingDealIdsRequest($ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdSetTargetingDealIdsAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetTargetingDealIdsAsync($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingDealIds'][0])
    {
        return $this->getAdSetTargetingDealIdsAsyncWithHttpInfo($ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdSetTargetingDealIdsAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetTargetingDealIdsAsyncWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingDealIds'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsResponse';
        $request = $this->getAdSetTargetingDealIdsRequest($ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdSetTargetingDealIds'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdSetTargetingDealIdsRequest($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingDealIds'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling getAdSetTargetingDealIds'
            );
        }


        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/deal-ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdSetTargetingVideoPositioning
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningResponse
     */
    public function getAdSetTargetingVideoPositioning($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingVideoPositioning'][0])
    {
        list($response) = $this->getAdSetTargetingVideoPositioningWithHttpInfo($ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation getAdSetTargetingVideoPositioningWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdSetTargetingVideoPositioningWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingVideoPositioning'][0])
    {
        $request = $this->getAdSetTargetingVideoPositioningRequest($ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdSetTargetingVideoPositioningAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetTargetingVideoPositioningAsync($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingVideoPositioning'][0])
    {
        return $this->getAdSetTargetingVideoPositioningAsyncWithHttpInfo($ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdSetTargetingVideoPositioningAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetTargetingVideoPositioningAsyncWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingVideoPositioning'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningResponse';
        $request = $this->getAdSetTargetingVideoPositioningRequest($ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdSetTargetingVideoPositioning'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdSetTargetingVideoPositioningRequest($ad_set_id, string $contentType = self::contentTypes['getAdSetTargetingVideoPositioning'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling getAdSetTargetingVideoPositioning'
            );
        }


        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/video-positioning';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdSetV24Q1
     *
     * @param  string $ad_set_id Id of the ad set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1
     */
    public function getAdSetV24Q1($ad_set_id, string $contentType = self::contentTypes['getAdSetV24Q1'][0])
    {
        list($response) = $this->getAdSetV24Q1WithHttpInfo($ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation getAdSetV24Q1WithHttpInfo
     *
     * @param  string $ad_set_id Id of the ad set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdSetV24Q1WithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getAdSetV24Q1'][0])
    {
        $request = $this->getAdSetV24Q1Request($ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdSetV24Q1Async
     *
     * @param  string $ad_set_id Id of the ad set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetV24Q1Async($ad_set_id, string $contentType = self::contentTypes['getAdSetV24Q1'][0])
    {
        return $this->getAdSetV24Q1AsyncWithHttpInfo($ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdSetV24Q1AsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the ad set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetV24Q1AsyncWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getAdSetV24Q1'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSetV24Q1';
        $request = $this->getAdSetV24Q1Request($ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdSetV24Q1'
     *
     * @param  string $ad_set_id Id of the ad set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdSetV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdSetV24Q1Request($ad_set_id, string $contentType = self::contentTypes['getAdSetV24Q1'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling getAdSetV24Q1'
            );
        }


        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserBundleRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function getAdvertiserBundleRules($advertiser_id, string $contentType = self::contentTypes['getAdvertiserBundleRules'][0])
    {
        list($response) = $this->getAdvertiserBundleRulesWithHttpInfo($advertiser_id, $contentType);
        return $response;
    }

    /**
     * Operation getAdvertiserBundleRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserBundleRulesWithHttpInfo($advertiser_id, string $contentType = self::contentTypes['getAdvertiserBundleRules'][0])
    {
        $request = $this->getAdvertiserBundleRulesRequest($advertiser_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserBundleRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserBundleRulesAsync($advertiser_id, string $contentType = self::contentTypes['getAdvertiserBundleRules'][0])
    {
        return $this->getAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserBundleRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, string $contentType = self::contentTypes['getAdvertiserBundleRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->getAdvertiserBundleRulesRequest($advertiser_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserBundleRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserBundleRulesRequest($advertiser_id, string $contentType = self::contentTypes['getAdvertiserBundleRules'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserBundleRules'
            );
        }


        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserDomainRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function getAdvertiserDomainRules($advertiser_id, string $contentType = self::contentTypes['getAdvertiserDomainRules'][0])
    {
        list($response) = $this->getAdvertiserDomainRulesWithHttpInfo($advertiser_id, $contentType);
        return $response;
    }

    /**
     * Operation getAdvertiserDomainRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserDomainRulesWithHttpInfo($advertiser_id, string $contentType = self::contentTypes['getAdvertiserDomainRules'][0])
    {
        $request = $this->getAdvertiserDomainRulesRequest($advertiser_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserDomainRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserDomainRulesAsync($advertiser_id, string $contentType = self::contentTypes['getAdvertiserDomainRules'][0])
    {
        return $this->getAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserDomainRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, string $contentType = self::contentTypes['getAdvertiserDomainRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->getAdvertiserDomainRulesRequest($advertiser_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserDomainRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserDomainRulesRequest($advertiser_id, string $contentType = self::contentTypes['getAdvertiserDomainRules'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserDomainRules'
            );
        }


        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignBundleRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function getCampaignBundleRules($campaign_id, string $contentType = self::contentTypes['getCampaignBundleRules'][0])
    {
        list($response) = $this->getCampaignBundleRulesWithHttpInfo($campaign_id, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignBundleRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignBundleRulesWithHttpInfo($campaign_id, string $contentType = self::contentTypes['getCampaignBundleRules'][0])
    {
        $request = $this->getCampaignBundleRulesRequest($campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignBundleRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignBundleRulesAsync($campaign_id, string $contentType = self::contentTypes['getCampaignBundleRules'][0])
    {
        return $this->getCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignBundleRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignBundleRulesAsyncWithHttpInfo($campaign_id, string $contentType = self::contentTypes['getCampaignBundleRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->getCampaignBundleRulesRequest($campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignBundleRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignBundleRulesRequest($campaign_id, string $contentType = self::contentTypes['getCampaignBundleRules'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getCampaignBundleRules'
            );
        }


        $resourcePath = '/preview/campaigns/{campaignId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignDomainRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function getCampaignDomainRules($campaign_id, string $contentType = self::contentTypes['getCampaignDomainRules'][0])
    {
        list($response) = $this->getCampaignDomainRulesWithHttpInfo($campaign_id, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignDomainRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignDomainRulesWithHttpInfo($campaign_id, string $contentType = self::contentTypes['getCampaignDomainRules'][0])
    {
        $request = $this->getCampaignDomainRulesRequest($campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignDomainRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignDomainRulesAsync($campaign_id, string $contentType = self::contentTypes['getCampaignDomainRules'][0])
    {
        return $this->getCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignDomainRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignDomainRulesAsyncWithHttpInfo($campaign_id, string $contentType = self::contentTypes['getCampaignDomainRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->getCampaignDomainRulesRequest($campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignDomainRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignDomainRulesRequest($campaign_id, string $contentType = self::contentTypes['getCampaignDomainRules'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getCampaignDomainRules'
            );
        }


        $resourcePath = '/preview/campaigns/{campaignId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignV23Q1
     *
     * @param  string $campaign_id Id of the campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignV23Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response
     */
    public function getCampaignV23Q1($campaign_id, string $contentType = self::contentTypes['getCampaignV23Q1'][0])
    {
        list($response) = $this->getCampaignV23Q1WithHttpInfo($campaign_id, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignV23Q1WithHttpInfo
     *
     * @param  string $campaign_id Id of the campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignV23Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignV23Q1WithHttpInfo($campaign_id, string $contentType = self::contentTypes['getCampaignV23Q1'][0])
    {
        $request = $this->getCampaignV23Q1Request($campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignV23Q1Async
     *
     * @param  string $campaign_id Id of the campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignV23Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignV23Q1Async($campaign_id, string $contentType = self::contentTypes['getCampaignV23Q1'][0])
    {
        return $this->getCampaignV23Q1AsyncWithHttpInfo($campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignV23Q1AsyncWithHttpInfo
     *
     * @param  string $campaign_id Id of the campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignV23Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignV23Q1AsyncWithHttpInfo($campaign_id, string $contentType = self::contentTypes['getCampaignV23Q1'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1Response';
        $request = $this->getCampaignV23Q1Request($campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignV23Q1'
     *
     * @param  string $campaign_id Id of the campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignV23Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignV23Q1Request($campaign_id, string $contentType = self::contentTypes['getCampaignV23Q1'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getCampaignV23Q1'
            );
        }


        $resourcePath = '/preview/marketing-solutions/campaigns/{campaign-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategoryBidList
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryBidList'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse
     */
    public function getCategoryBidList($ad_set_id, string $contentType = self::contentTypes['getCategoryBidList'][0])
    {
        list($response) = $this->getCategoryBidListWithHttpInfo($ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation getCategoryBidListWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryBidList'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryBidListWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getCategoryBidList'][0])
    {
        $request = $this->getCategoryBidListRequest($ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategoryBidListAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryBidList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryBidListAsync($ad_set_id, string $contentType = self::contentTypes['getCategoryBidList'][0])
    {
        return $this->getCategoryBidListAsyncWithHttpInfo($ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoryBidListAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryBidList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryBidListAsyncWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getCategoryBidList'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse';
        $request = $this->getCategoryBidListRequest($ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategoryBidList'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryBidList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCategoryBidListRequest($ad_set_id, string $contentType = self::contentTypes['getCategoryBidList'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling getCategoryBidList'
            );
        }


        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/category-bids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDisplayMultipliers
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse
     */
    public function getDisplayMultipliers($ad_set_id, string $contentType = self::contentTypes['getDisplayMultipliers'][0])
    {
        list($response) = $this->getDisplayMultipliersWithHttpInfo($ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation getDisplayMultipliersWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDisplayMultipliersWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getDisplayMultipliers'][0])
    {
        $request = $this->getDisplayMultipliersRequest($ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDisplayMultipliersAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDisplayMultipliersAsync($ad_set_id, string $contentType = self::contentTypes['getDisplayMultipliers'][0])
    {
        return $this->getDisplayMultipliersAsyncWithHttpInfo($ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDisplayMultipliersAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDisplayMultipliersAsyncWithHttpInfo($ad_set_id, string $contentType = self::contentTypes['getDisplayMultipliers'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse';
        $request = $this->getDisplayMultipliersRequest($ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDisplayMultipliers'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDisplayMultipliersRequest($ad_set_id, string $contentType = self::contentTypes['getDisplayMultipliers'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling getDisplayMultipliers'
            );
        }


        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/display-multipliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOCIbrandSafetyRule
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse
     */
    public function getOCIbrandSafetyRule($target_type, $target_id, string $contentType = self::contentTypes['getOCIbrandSafetyRule'][0])
    {
        list($response) = $this->getOCIbrandSafetyRuleWithHttpInfo($target_type, $target_id, $contentType);
        return $response;
    }

    /**
     * Operation getOCIbrandSafetyRuleWithHttpInfo
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOCIbrandSafetyRuleWithHttpInfo($target_type, $target_id, string $contentType = self::contentTypes['getOCIbrandSafetyRule'][0])
    {
        $request = $this->getOCIbrandSafetyRuleRequest($target_type, $target_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOCIbrandSafetyRuleAsync
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOCIbrandSafetyRuleAsync($target_type, $target_id, string $contentType = self::contentTypes['getOCIbrandSafetyRule'][0])
    {
        return $this->getOCIbrandSafetyRuleAsyncWithHttpInfo($target_type, $target_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOCIbrandSafetyRuleAsyncWithHttpInfo
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOCIbrandSafetyRuleAsyncWithHttpInfo($target_type, $target_id, string $contentType = self::contentTypes['getOCIbrandSafetyRule'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse';
        $request = $this->getOCIbrandSafetyRuleRequest($target_type, $target_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOCIbrandSafetyRule'
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOCIbrandSafetyRuleRequest($target_type, $target_id, string $contentType = self::contentTypes['getOCIbrandSafetyRule'][0])
    {

        // verify the required parameter 'target_type' is set
        if ($target_type === null || (is_array($target_type) && count($target_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_type when calling getOCIbrandSafetyRule'
            );
        }

        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling getOCIbrandSafetyRule'
            );
        }
        if ($target_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$target_id" when calling CampaignApi.getOCIbrandSafetyRule, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/preview/brand-safety/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_type,
            'target-type', // param base name
            'TargetType', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_id,
            'target-id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOCItargetingRule
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse
     */
    public function getOCItargetingRule($target_type, $target_id, string $contentType = self::contentTypes['getOCItargetingRule'][0])
    {
        list($response) = $this->getOCItargetingRuleWithHttpInfo($target_type, $target_id, $contentType);
        return $response;
    }

    /**
     * Operation getOCItargetingRuleWithHttpInfo
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOCItargetingRuleWithHttpInfo($target_type, $target_id, string $contentType = self::contentTypes['getOCItargetingRule'][0])
    {
        $request = $this->getOCItargetingRuleRequest($target_type, $target_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOCItargetingRuleAsync
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOCItargetingRuleAsync($target_type, $target_id, string $contentType = self::contentTypes['getOCItargetingRule'][0])
    {
        return $this->getOCItargetingRuleAsyncWithHttpInfo($target_type, $target_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOCItargetingRuleAsyncWithHttpInfo
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOCItargetingRuleAsyncWithHttpInfo($target_type, $target_id, string $contentType = self::contentTypes['getOCItargetingRule'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse';
        $request = $this->getOCItargetingRuleRequest($target_type, $target_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOCItargetingRule'
     *
     * @param  TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOCItargetingRuleRequest($target_type, $target_id, string $contentType = self::contentTypes['getOCItargetingRule'][0])
    {

        // verify the required parameter 'target_type' is set
        if ($target_type === null || (is_array($target_type) && count($target_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_type when calling getOCItargetingRule'
            );
        }

        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling getOCItargetingRule'
            );
        }
        if ($target_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$target_id" when calling CampaignApi.getOCItargetingRule, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/preview/targeting/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_type,
            'target-type', // param base name
            'TargetType', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_id,
            'target-id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplyVendorList
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplyVendorList'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\SupplyVendorListResponse
     */
    public function getSupplyVendorList(string $contentType = self::contentTypes['getSupplyVendorList'][0])
    {
        list($response) = $this->getSupplyVendorListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSupplyVendorListWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplyVendorList'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\SupplyVendorListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplyVendorListWithHttpInfo(string $contentType = self::contentTypes['getSupplyVendorList'][0])
    {
        $request = $this->getSupplyVendorListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\SupplyVendorListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\SupplyVendorListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\SupplyVendorListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\SupplyVendorListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\SupplyVendorListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplyVendorListAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplyVendorList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplyVendorListAsync(string $contentType = self::contentTypes['getSupplyVendorList'][0])
    {
        return $this->getSupplyVendorListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplyVendorListAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplyVendorList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplyVendorListAsyncWithHttpInfo(string $contentType = self::contentTypes['getSupplyVendorList'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\SupplyVendorListResponse';
        $request = $this->getSupplyVendorListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplyVendorList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplyVendorList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSupplyVendorListRequest(string $contentType = self::contentTypes['getSupplyVendorList'][0])
    {


        $resourcePath = '/preview/marketing-solutions/ad-sets/targeting/supply-vendors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchAdSetsV24Q1
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSetV24Q1 $requests_patch_ad_set_v24_q1 List of adsets to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetIdV24Q1
     */
    public function patchAdSetsV24Q1($requests_patch_ad_set_v24_q1 = null, string $contentType = self::contentTypes['patchAdSetsV24Q1'][0])
    {
        list($response) = $this->patchAdSetsV24Q1WithHttpInfo($requests_patch_ad_set_v24_q1, $contentType);
        return $response;
    }

    /**
     * Operation patchAdSetsV24Q1WithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSetV24Q1 $requests_patch_ad_set_v24_q1 List of adsets to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetIdV24Q1, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAdSetsV24Q1WithHttpInfo($requests_patch_ad_set_v24_q1 = null, string $contentType = self::contentTypes['patchAdSetsV24Q1'][0])
    {
        $request = $this->patchAdSetsV24Q1Request($requests_patch_ad_set_v24_q1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetIdV24Q1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetIdV24Q1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetIdV24Q1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetIdV24Q1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetIdV24Q1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchAdSetsV24Q1Async
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSetV24Q1 $requests_patch_ad_set_v24_q1 List of adsets to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAdSetsV24Q1Async($requests_patch_ad_set_v24_q1 = null, string $contentType = self::contentTypes['patchAdSetsV24Q1'][0])
    {
        return $this->patchAdSetsV24Q1AsyncWithHttpInfo($requests_patch_ad_set_v24_q1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchAdSetsV24Q1AsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSetV24Q1 $requests_patch_ad_set_v24_q1 List of adsets to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAdSetsV24Q1AsyncWithHttpInfo($requests_patch_ad_set_v24_q1 = null, string $contentType = self::contentTypes['patchAdSetsV24Q1'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetIdV24Q1';
        $request = $this->patchAdSetsV24Q1Request($requests_patch_ad_set_v24_q1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchAdSetsV24Q1'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSetV24Q1 $requests_patch_ad_set_v24_q1 List of adsets to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchAdSetsV24Q1Request($requests_patch_ad_set_v24_q1 = null, string $contentType = self::contentTypes['patchAdSetsV24Q1'][0])
    {



        $resourcePath = '/preview/marketing-solutions/ad-sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requests_patch_ad_set_v24_q1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requests_patch_ad_set_v24_q1));
            } else {
                $httpBody = $requests_patch_ad_set_v24_q1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchCampaigns
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCampaigns'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse
     */
    public function patchCampaigns($patch_campaign_list_request = null, string $contentType = self::contentTypes['patchCampaigns'][0])
    {
        list($response) = $this->patchCampaignsWithHttpInfo($patch_campaign_list_request, $contentType);
        return $response;
    }

    /**
     * Operation patchCampaignsWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCampaigns'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchCampaignsWithHttpInfo($patch_campaign_list_request = null, string $contentType = self::contentTypes['patchCampaigns'][0])
    {
        $request = $this->patchCampaignsRequest($patch_campaign_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchCampaignsAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCampaignsAsync($patch_campaign_list_request = null, string $contentType = self::contentTypes['patchCampaigns'][0])
    {
        return $this->patchCampaignsAsyncWithHttpInfo($patch_campaign_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchCampaignsAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCampaignsAsyncWithHttpInfo($patch_campaign_list_request = null, string $contentType = self::contentTypes['patchCampaigns'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse';
        $request = $this->patchCampaignsRequest($patch_campaign_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchCampaigns'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchCampaignsRequest($patch_campaign_list_request = null, string $contentType = self::contentTypes['patchCampaigns'][0])
    {



        $resourcePath = '/preview/marketing-solutions/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_campaign_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_campaign_list_request));
            } else {
                $httpBody = $patch_campaign_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchCategoryBidList
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request patch_ad_set_category_bid_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCategoryBidList'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse
     */
    public function patchCategoryBidList($ad_set_id, $patch_ad_set_category_bid_list_request = null, string $contentType = self::contentTypes['patchCategoryBidList'][0])
    {
        list($response) = $this->patchCategoryBidListWithHttpInfo($ad_set_id, $patch_ad_set_category_bid_list_request, $contentType);
        return $response;
    }

    /**
     * Operation patchCategoryBidListWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCategoryBidList'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchCategoryBidListWithHttpInfo($ad_set_id, $patch_ad_set_category_bid_list_request = null, string $contentType = self::contentTypes['patchCategoryBidList'][0])
    {
        $request = $this->patchCategoryBidListRequest($ad_set_id, $patch_ad_set_category_bid_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchCategoryBidListAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCategoryBidList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCategoryBidListAsync($ad_set_id, $patch_ad_set_category_bid_list_request = null, string $contentType = self::contentTypes['patchCategoryBidList'][0])
    {
        return $this->patchCategoryBidListAsyncWithHttpInfo($ad_set_id, $patch_ad_set_category_bid_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchCategoryBidListAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCategoryBidList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCategoryBidListAsyncWithHttpInfo($ad_set_id, $patch_ad_set_category_bid_list_request = null, string $contentType = self::contentTypes['patchCategoryBidList'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse';
        $request = $this->patchCategoryBidListRequest($ad_set_id, $patch_ad_set_category_bid_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchCategoryBidList'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCategoryBidList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchCategoryBidListRequest($ad_set_id, $patch_ad_set_category_bid_list_request = null, string $contentType = self::contentTypes['patchCategoryBidList'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling patchCategoryBidList'
            );
        }



        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/category-bids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_ad_set_category_bid_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_ad_set_category_bid_list_request));
            } else {
                $httpBody = $patch_ad_set_category_bid_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDisplayMultipliers
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request patch_ad_set_display_multiplier_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse
     */
    public function patchDisplayMultipliers($ad_set_id, $patch_ad_set_display_multiplier_list_request = null, string $contentType = self::contentTypes['patchDisplayMultipliers'][0])
    {
        list($response) = $this->patchDisplayMultipliersWithHttpInfo($ad_set_id, $patch_ad_set_display_multiplier_list_request, $contentType);
        return $response;
    }

    /**
     * Operation patchDisplayMultipliersWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDisplayMultipliersWithHttpInfo($ad_set_id, $patch_ad_set_display_multiplier_list_request = null, string $contentType = self::contentTypes['patchDisplayMultipliers'][0])
    {
        $request = $this->patchDisplayMultipliersRequest($ad_set_id, $patch_ad_set_display_multiplier_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDisplayMultipliersAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDisplayMultipliersAsync($ad_set_id, $patch_ad_set_display_multiplier_list_request = null, string $contentType = self::contentTypes['patchDisplayMultipliers'][0])
    {
        return $this->patchDisplayMultipliersAsyncWithHttpInfo($ad_set_id, $patch_ad_set_display_multiplier_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDisplayMultipliersAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDisplayMultipliersAsyncWithHttpInfo($ad_set_id, $patch_ad_set_display_multiplier_list_request = null, string $contentType = self::contentTypes['patchDisplayMultipliers'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse';
        $request = $this->patchDisplayMultipliersRequest($ad_set_id, $patch_ad_set_display_multiplier_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDisplayMultipliers'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDisplayMultipliers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDisplayMultipliersRequest($ad_set_id, $patch_ad_set_display_multiplier_list_request = null, string $contentType = self::contentTypes['patchDisplayMultipliers'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling patchDisplayMultipliers'
            );
        }



        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/display-multipliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_ad_set_display_multiplier_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_ad_set_display_multiplier_list_request));
            } else {
                $httpBody = $patch_ad_set_display_multiplier_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAdvertiserBundleRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function postAdvertiserBundleRules($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserBundleRules'][0])
    {
        list($response) = $this->postAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation postAdvertiserBundleRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserBundleRules'][0])
    {
        $request = $this->postAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAdvertiserBundleRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAdvertiserBundleRulesAsync($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserBundleRules'][0])
    {
        return $this->postAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAdvertiserBundleRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserBundleRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->postAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAdvertiserBundleRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserBundleRules'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling postAdvertiserBundleRules'
            );
        }



        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAdvertiserDomainRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity
     */
    public function postAdvertiserDomainRules($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserDomainRules'][0])
    {
        list($response) = $this->postAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation postAdvertiserDomainRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserDomainRules'][0])
    {
        $request = $this->postAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAdvertiserDomainRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAdvertiserDomainRulesAsync($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserDomainRules'][0])
    {
        return $this->postAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAdvertiserDomainRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserDomainRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->postAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAdvertiserDomainRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postAdvertiserDomainRules'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling postAdvertiserDomainRules'
            );
        }



        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCampaignBundleRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function postCampaignBundleRules($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignBundleRules'][0])
    {
        list($response) = $this->postCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation postCampaignBundleRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignBundleRules'][0])
    {
        $request = $this->postCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCampaignBundleRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignBundleRulesAsync($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignBundleRules'][0])
    {
        return $this->postCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCampaignBundleRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignBundleRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->postCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCampaignBundleRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignBundleRules'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling postCampaignBundleRules'
            );
        }



        $resourcePath = '/preview/campaigns/{campaignId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCampaignDomainRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function postCampaignDomainRules($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignDomainRules'][0])
    {
        list($response) = $this->postCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation postCampaignDomainRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignDomainRules'][0])
    {
        $request = $this->postCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCampaignDomainRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignDomainRulesAsync($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignDomainRules'][0])
    {
        return $this->postCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCampaignDomainRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignDomainRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->postCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCampaignDomainRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['postCampaignDomainRules'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling postCampaignDomainRules'
            );
        }



        $resourcePath = '/preview/campaigns/{campaignId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAdvertiserBundleRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function putAdvertiserBundleRules($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserBundleRules'][0])
    {
        list($response) = $this->putAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation putAdvertiserBundleRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserBundleRules'][0])
    {
        $request = $this->putAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAdvertiserBundleRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAdvertiserBundleRulesAsync($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserBundleRules'][0])
    {
        return $this->putAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAdvertiserBundleRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserBundleRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->putAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAdvertiserBundleRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserBundleRules'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling putAdvertiserBundleRules'
            );
        }



        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAdvertiserDomainRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function putAdvertiserDomainRules($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserDomainRules'][0])
    {
        list($response) = $this->putAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation putAdvertiserDomainRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserDomainRules'][0])
    {
        $request = $this->putAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAdvertiserDomainRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAdvertiserDomainRulesAsync($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserDomainRules'][0])
    {
        return $this->putAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAdvertiserDomainRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserDomainRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->putAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAdvertiserDomainRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAdvertiserDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putAdvertiserDomainRules'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling putAdvertiserDomainRules'
            );
        }



        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCampaignBundleRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function putCampaignBundleRules($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignBundleRules'][0])
    {
        list($response) = $this->putCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation putCampaignBundleRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignBundleRules'][0])
    {
        $request = $this->putCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCampaignBundleRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCampaignBundleRulesAsync($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignBundleRules'][0])
    {
        return $this->putCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCampaignBundleRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignBundleRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->putCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCampaignBundleRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignBundleRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignBundleRules'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling putCampaignBundleRules'
            );
        }



        $resourcePath = '/preview/campaigns/{campaignId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCampaignDomainRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function putCampaignDomainRules($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignDomainRules'][0])
    {
        list($response) = $this->putCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType);
        return $response;
    }

    /**
     * Operation putCampaignDomainRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignDomainRules'][0])
    {
        $request = $this->putCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCampaignDomainRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCampaignDomainRulesAsync($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignDomainRules'][0])
    {
        return $this->putCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCampaignDomainRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignDomainRules'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->putCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCampaignDomainRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCampaignDomainRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity = null, string $contentType = self::contentTypes['putCampaignDomainRules'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling putCampaignDomainRules'
            );
        }



        $resourcePath = '/preview/campaigns/{campaignId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAdSetsV24Q1
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetSearchRequestV24Q1 $ad_set_search_request_v24_q1 ad_set_search_request_v24_q1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSetV24Q1
     */
    public function searchAdSetsV24Q1($ad_set_search_request_v24_q1 = null, string $contentType = self::contentTypes['searchAdSetsV24Q1'][0])
    {
        list($response) = $this->searchAdSetsV24Q1WithHttpInfo($ad_set_search_request_v24_q1, $contentType);
        return $response;
    }

    /**
     * Operation searchAdSetsV24Q1WithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetSearchRequestV24Q1 $ad_set_search_request_v24_q1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSetV24Q1, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAdSetsV24Q1WithHttpInfo($ad_set_search_request_v24_q1 = null, string $contentType = self::contentTypes['searchAdSetsV24Q1'][0])
    {
        $request = $this->searchAdSetsV24Q1Request($ad_set_search_request_v24_q1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSetV24Q1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSetV24Q1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSetV24Q1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSetV24Q1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSetV24Q1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAdSetsV24Q1Async
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetSearchRequestV24Q1 $ad_set_search_request_v24_q1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAdSetsV24Q1Async($ad_set_search_request_v24_q1 = null, string $contentType = self::contentTypes['searchAdSetsV24Q1'][0])
    {
        return $this->searchAdSetsV24Q1AsyncWithHttpInfo($ad_set_search_request_v24_q1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAdSetsV24Q1AsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetSearchRequestV24Q1 $ad_set_search_request_v24_q1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAdSetsV24Q1AsyncWithHttpInfo($ad_set_search_request_v24_q1 = null, string $contentType = self::contentTypes['searchAdSetsV24Q1'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSetV24Q1';
        $request = $this->searchAdSetsV24Q1Request($ad_set_search_request_v24_q1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAdSetsV24Q1'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetSearchRequestV24Q1 $ad_set_search_request_v24_q1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAdSetsV24Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchAdSetsV24Q1Request($ad_set_search_request_v24_q1 = null, string $contentType = self::contentTypes['searchAdSetsV24Q1'][0])
    {



        $resourcePath = '/preview/marketing-solutions/ad-sets/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ad_set_search_request_v24_q1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ad_set_search_request_v24_q1));
            } else {
                $httpBody = $ad_set_search_request_v24_q1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchCampaignsV23Q1
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequestV23Q1 $campaign_search_request_v23_q1 filters on campaigns (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCampaignsV23Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\CampaignV23Q1ListResponse
     */
    public function searchCampaignsV23Q1($campaign_search_request_v23_q1 = null, string $contentType = self::contentTypes['searchCampaignsV23Q1'][0])
    {
        list($response) = $this->searchCampaignsV23Q1WithHttpInfo($campaign_search_request_v23_q1, $contentType);
        return $response;
    }

    /**
     * Operation searchCampaignsV23Q1WithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequestV23Q1 $campaign_search_request_v23_q1 filters on campaigns (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCampaignsV23Q1'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\CampaignV23Q1ListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCampaignsV23Q1WithHttpInfo($campaign_search_request_v23_q1 = null, string $contentType = self::contentTypes['searchCampaignsV23Q1'][0])
    {
        $request = $this->searchCampaignsV23Q1Request($campaign_search_request_v23_q1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1ListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1ListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1ListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1ListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1ListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCampaignsV23Q1Async
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequestV23Q1 $campaign_search_request_v23_q1 filters on campaigns (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCampaignsV23Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCampaignsV23Q1Async($campaign_search_request_v23_q1 = null, string $contentType = self::contentTypes['searchCampaignsV23Q1'][0])
    {
        return $this->searchCampaignsV23Q1AsyncWithHttpInfo($campaign_search_request_v23_q1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCampaignsV23Q1AsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequestV23Q1 $campaign_search_request_v23_q1 filters on campaigns (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCampaignsV23Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCampaignsV23Q1AsyncWithHttpInfo($campaign_search_request_v23_q1 = null, string $contentType = self::contentTypes['searchCampaignsV23Q1'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignV23Q1ListResponse';
        $request = $this->searchCampaignsV23Q1Request($campaign_search_request_v23_q1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCampaignsV23Q1'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequestV23Q1 $campaign_search_request_v23_q1 filters on campaigns (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCampaignsV23Q1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCampaignsV23Q1Request($campaign_search_request_v23_q1 = null, string $contentType = self::contentTypes['searchCampaignsV23Q1'][0])
    {



        $resourcePath = '/preview/marketing-solutions/campaigns/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_search_request_v23_q1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_search_request_v23_q1));
            } else {
                $httpBody = $campaign_search_request_v23_q1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAdSetTargetingDealIds
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingDealIdsRequest $set_ad_set_targeting_deal_ids_request the new Deal Id Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsSetResultResponse
     */
    public function setAdSetTargetingDealIds($ad_set_id, $set_ad_set_targeting_deal_ids_request = null, string $contentType = self::contentTypes['setAdSetTargetingDealIds'][0])
    {
        list($response) = $this->setAdSetTargetingDealIdsWithHttpInfo($ad_set_id, $set_ad_set_targeting_deal_ids_request, $contentType);
        return $response;
    }

    /**
     * Operation setAdSetTargetingDealIdsWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingDealIdsRequest $set_ad_set_targeting_deal_ids_request the new Deal Id Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsSetResultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAdSetTargetingDealIdsWithHttpInfo($ad_set_id, $set_ad_set_targeting_deal_ids_request = null, string $contentType = self::contentTypes['setAdSetTargetingDealIds'][0])
    {
        $request = $this->setAdSetTargetingDealIdsRequest($ad_set_id, $set_ad_set_targeting_deal_ids_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsSetResultResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsSetResultResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsSetResultResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsSetResultResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsSetResultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setAdSetTargetingDealIdsAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingDealIdsRequest $set_ad_set_targeting_deal_ids_request the new Deal Id Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAdSetTargetingDealIdsAsync($ad_set_id, $set_ad_set_targeting_deal_ids_request = null, string $contentType = self::contentTypes['setAdSetTargetingDealIds'][0])
    {
        return $this->setAdSetTargetingDealIdsAsyncWithHttpInfo($ad_set_id, $set_ad_set_targeting_deal_ids_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAdSetTargetingDealIdsAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingDealIdsRequest $set_ad_set_targeting_deal_ids_request the new Deal Id Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAdSetTargetingDealIdsAsyncWithHttpInfo($ad_set_id, $set_ad_set_targeting_deal_ids_request = null, string $contentType = self::contentTypes['setAdSetTargetingDealIds'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingDealIdsSetResultResponse';
        $request = $this->setAdSetTargetingDealIdsRequest($ad_set_id, $set_ad_set_targeting_deal_ids_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setAdSetTargetingDealIds'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingDealIdsRequest $set_ad_set_targeting_deal_ids_request the new Deal Id Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingDealIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setAdSetTargetingDealIdsRequest($ad_set_id, $set_ad_set_targeting_deal_ids_request = null, string $contentType = self::contentTypes['setAdSetTargetingDealIds'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling setAdSetTargetingDealIds'
            );
        }



        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/deal-ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_ad_set_targeting_deal_ids_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_ad_set_targeting_deal_ids_request));
            } else {
                $httpBody = $set_ad_set_targeting_deal_ids_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAdSetTargetingVideoPositioning
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingVideoPositioningRequest $set_ad_set_targeting_video_positioning_request the new Video Positioning Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningSetResultResponse
     */
    public function setAdSetTargetingVideoPositioning($ad_set_id, $set_ad_set_targeting_video_positioning_request = null, string $contentType = self::contentTypes['setAdSetTargetingVideoPositioning'][0])
    {
        list($response) = $this->setAdSetTargetingVideoPositioningWithHttpInfo($ad_set_id, $set_ad_set_targeting_video_positioning_request, $contentType);
        return $response;
    }

    /**
     * Operation setAdSetTargetingVideoPositioningWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingVideoPositioningRequest $set_ad_set_targeting_video_positioning_request the new Video Positioning Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningSetResultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAdSetTargetingVideoPositioningWithHttpInfo($ad_set_id, $set_ad_set_targeting_video_positioning_request = null, string $contentType = self::contentTypes['setAdSetTargetingVideoPositioning'][0])
    {
        $request = $this->setAdSetTargetingVideoPositioningRequest($ad_set_id, $set_ad_set_targeting_video_positioning_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningSetResultResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningSetResultResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningSetResultResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningSetResultResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningSetResultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setAdSetTargetingVideoPositioningAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingVideoPositioningRequest $set_ad_set_targeting_video_positioning_request the new Video Positioning Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAdSetTargetingVideoPositioningAsync($ad_set_id, $set_ad_set_targeting_video_positioning_request = null, string $contentType = self::contentTypes['setAdSetTargetingVideoPositioning'][0])
    {
        return $this->setAdSetTargetingVideoPositioningAsyncWithHttpInfo($ad_set_id, $set_ad_set_targeting_video_positioning_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAdSetTargetingVideoPositioningAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingVideoPositioningRequest $set_ad_set_targeting_video_positioning_request the new Video Positioning Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAdSetTargetingVideoPositioningAsyncWithHttpInfo($ad_set_id, $set_ad_set_targeting_video_positioning_request = null, string $contentType = self::contentTypes['setAdSetTargetingVideoPositioning'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetTargetingVideoPositioningSetResultResponse';
        $request = $this->setAdSetTargetingVideoPositioningRequest($ad_set_id, $set_ad_set_targeting_video_positioning_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setAdSetTargetingVideoPositioning'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\SetAdSetTargetingVideoPositioningRequest $set_ad_set_targeting_video_positioning_request the new Video Positioning Targeting configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdSetTargetingVideoPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setAdSetTargetingVideoPositioningRequest($ad_set_id, $set_ad_set_targeting_video_positioning_request = null, string $contentType = self::contentTypes['setAdSetTargetingVideoPositioning'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling setAdSetTargetingVideoPositioning'
            );
        }



        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/video-positioning';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_ad_set_targeting_video_positioning_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_ad_set_targeting_video_positioning_request));
            } else {
                $httpBody = $set_ad_set_targeting_video_positioning_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startAdSets
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startAdSets'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId
     */
    public function startAdSets($requests_ad_set_id = null, string $contentType = self::contentTypes['startAdSets'][0])
    {
        list($response) = $this->startAdSetsWithHttpInfo($requests_ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation startAdSetsWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startAdSets'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId, HTTP status code, HTTP response headers (array of strings)
     */
    public function startAdSetsWithHttpInfo($requests_ad_set_id = null, string $contentType = self::contentTypes['startAdSets'][0])
    {
        $request = $this->startAdSetsRequest($requests_ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startAdSetsAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startAdSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startAdSetsAsync($requests_ad_set_id = null, string $contentType = self::contentTypes['startAdSets'][0])
    {
        return $this->startAdSetsAsyncWithHttpInfo($requests_ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startAdSetsAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startAdSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startAdSetsAsyncWithHttpInfo($requests_ad_set_id = null, string $contentType = self::contentTypes['startAdSets'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId';
        $request = $this->startAdSetsRequest($requests_ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startAdSets'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startAdSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startAdSetsRequest($requests_ad_set_id = null, string $contentType = self::contentTypes['startAdSets'][0])
    {



        $resourcePath = '/preview/marketing-solutions/ad-sets/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requests_ad_set_id)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requests_ad_set_id));
            } else {
                $httpBody = $requests_ad_set_id;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopAdSets
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopAdSets'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId
     */
    public function stopAdSets($requests_ad_set_id = null, string $contentType = self::contentTypes['stopAdSets'][0])
    {
        list($response) = $this->stopAdSetsWithHttpInfo($requests_ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation stopAdSetsWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopAdSets'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopAdSetsWithHttpInfo($requests_ad_set_id = null, string $contentType = self::contentTypes['stopAdSets'][0])
    {
        $request = $this->stopAdSetsRequest($requests_ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopAdSetsAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopAdSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopAdSetsAsync($requests_ad_set_id = null, string $contentType = self::contentTypes['stopAdSets'][0])
    {
        return $this->stopAdSetsAsyncWithHttpInfo($requests_ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopAdSetsAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopAdSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopAdSetsAsyncWithHttpInfo($requests_ad_set_id = null, string $contentType = self::contentTypes['stopAdSets'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId';
        $request = $this->stopAdSetsRequest($requests_ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopAdSets'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopAdSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function stopAdSetsRequest($requests_ad_set_id = null, string $contentType = self::contentTypes['stopAdSets'][0])
    {



        $resourcePath = '/preview/marketing-solutions/ad-sets/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requests_ad_set_id)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requests_ad_set_id));
            } else {
                $httpBody = $requests_ad_set_id;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAdSetAudience
     *
     * @param  string $ad_set_id The ad set ID. (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkInputEntityV1 $ad_set_audience_link_input_entity_v1 Ad set-Audience update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdSetAudience'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkEntityV1Response
     */
    public function updateAdSetAudience($ad_set_id, $ad_set_audience_link_input_entity_v1, string $contentType = self::contentTypes['updateAdSetAudience'][0])
    {
        list($response) = $this->updateAdSetAudienceWithHttpInfo($ad_set_id, $ad_set_audience_link_input_entity_v1, $contentType);
        return $response;
    }

    /**
     * Operation updateAdSetAudienceWithHttpInfo
     *
     * @param  string $ad_set_id The ad set ID. (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkInputEntityV1 $ad_set_audience_link_input_entity_v1 Ad set-Audience update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdSetAudience'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkEntityV1Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAdSetAudienceWithHttpInfo($ad_set_id, $ad_set_audience_link_input_entity_v1, string $contentType = self::contentTypes['updateAdSetAudience'][0])
    {
        $request = $this->updateAdSetAudienceRequest($ad_set_id, $ad_set_audience_link_input_entity_v1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkEntityV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkEntityV1Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkEntityV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkEntityV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkEntityV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAdSetAudienceAsync
     *
     * @param  string $ad_set_id The ad set ID. (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkInputEntityV1 $ad_set_audience_link_input_entity_v1 Ad set-Audience update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdSetAudience'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdSetAudienceAsync($ad_set_id, $ad_set_audience_link_input_entity_v1, string $contentType = self::contentTypes['updateAdSetAudience'][0])
    {
        return $this->updateAdSetAudienceAsyncWithHttpInfo($ad_set_id, $ad_set_audience_link_input_entity_v1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAdSetAudienceAsyncWithHttpInfo
     *
     * @param  string $ad_set_id The ad set ID. (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkInputEntityV1 $ad_set_audience_link_input_entity_v1 Ad set-Audience update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdSetAudience'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdSetAudienceAsyncWithHttpInfo($ad_set_id, $ad_set_audience_link_input_entity_v1, string $contentType = self::contentTypes['updateAdSetAudience'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkEntityV1Response';
        $request = $this->updateAdSetAudienceRequest($ad_set_id, $ad_set_audience_link_input_entity_v1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAdSetAudience'
     *
     * @param  string $ad_set_id The ad set ID. (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\AdSetAudienceLinkInputEntityV1 $ad_set_audience_link_input_entity_v1 Ad set-Audience update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdSetAudience'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAdSetAudienceRequest($ad_set_id, $ad_set_audience_link_input_entity_v1, string $contentType = self::contentTypes['updateAdSetAudience'][0])
    {

        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling updateAdSetAudience'
            );
        }

        // verify the required parameter 'ad_set_audience_link_input_entity_v1' is set
        if ($ad_set_audience_link_input_entity_v1 === null || (is_array($ad_set_audience_link_input_entity_v1) && count($ad_set_audience_link_input_entity_v1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_audience_link_input_entity_v1 when calling updateAdSetAudience'
            );
        }


        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/audience';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ad_set_audience_link_input_entity_v1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ad_set_audience_link_input_entity_v1));
            } else {
                $httpBody = $ad_set_audience_link_input_entity_v1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsertOCIbrandSafetyRule
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse
     */
    public function upsertOCIbrandSafetyRule($oci_brand_safety_rule, string $contentType = self::contentTypes['upsertOCIbrandSafetyRule'][0])
    {
        list($response) = $this->upsertOCIbrandSafetyRuleWithHttpInfo($oci_brand_safety_rule, $contentType);
        return $response;
    }

    /**
     * Operation upsertOCIbrandSafetyRuleWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertOCIbrandSafetyRuleWithHttpInfo($oci_brand_safety_rule, string $contentType = self::contentTypes['upsertOCIbrandSafetyRule'][0])
    {
        $request = $this->upsertOCIbrandSafetyRuleRequest($oci_brand_safety_rule, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsertOCIbrandSafetyRuleAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOCIbrandSafetyRuleAsync($oci_brand_safety_rule, string $contentType = self::contentTypes['upsertOCIbrandSafetyRule'][0])
    {
        return $this->upsertOCIbrandSafetyRuleAsyncWithHttpInfo($oci_brand_safety_rule, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsertOCIbrandSafetyRuleAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOCIbrandSafetyRuleAsyncWithHttpInfo($oci_brand_safety_rule, string $contentType = self::contentTypes['upsertOCIbrandSafetyRule'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse';
        $request = $this->upsertOCIbrandSafetyRuleRequest($oci_brand_safety_rule, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsertOCIbrandSafetyRule'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCIbrandSafetyRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function upsertOCIbrandSafetyRuleRequest($oci_brand_safety_rule, string $contentType = self::contentTypes['upsertOCIbrandSafetyRule'][0])
    {

        // verify the required parameter 'oci_brand_safety_rule' is set
        if ($oci_brand_safety_rule === null || (is_array($oci_brand_safety_rule) && count($oci_brand_safety_rule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oci_brand_safety_rule when calling upsertOCIbrandSafetyRule'
            );
        }


        $resourcePath = '/preview/brand-safety/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($oci_brand_safety_rule)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($oci_brand_safety_rule));
            } else {
                $httpBody = $oci_brand_safety_rule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsertOCItargetingRule
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse
     */
    public function upsertOCItargetingRule($oci_targeting_rule, string $contentType = self::contentTypes['upsertOCItargetingRule'][0])
    {
        list($response) = $this->upsertOCItargetingRuleWithHttpInfo($oci_targeting_rule, $contentType);
        return $response;
    }

    /**
     * Operation upsertOCItargetingRuleWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertOCItargetingRuleWithHttpInfo($oci_targeting_rule, string $contentType = self::contentTypes['upsertOCItargetingRule'][0])
    {
        $request = $this->upsertOCItargetingRuleRequest($oci_targeting_rule, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsertOCItargetingRuleAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOCItargetingRuleAsync($oci_targeting_rule, string $contentType = self::contentTypes['upsertOCItargetingRule'][0])
    {
        return $this->upsertOCItargetingRuleAsyncWithHttpInfo($oci_targeting_rule, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsertOCItargetingRuleAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOCItargetingRuleAsyncWithHttpInfo($oci_targeting_rule, string $contentType = self::contentTypes['upsertOCItargetingRule'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse';
        $request = $this->upsertOCItargetingRuleRequest($oci_targeting_rule, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsertOCItargetingRule'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertOCItargetingRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function upsertOCItargetingRuleRequest($oci_targeting_rule, string $contentType = self::contentTypes['upsertOCItargetingRule'][0])
    {

        // verify the required parameter 'oci_targeting_rule' is set
        if ($oci_targeting_rule === null || (is_array($oci_targeting_rule) && count($oci_targeting_rule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oci_targeting_rule when calling upsertOCItargetingRule'
            );
        }


        $resourcePath = '/preview/targeting/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($oci_targeting_rule)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($oci_targeting_rule));
            } else {
                $httpBody = $oci_targeting_rule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
